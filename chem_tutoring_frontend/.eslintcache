[{"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/index.js":"1","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/reportWebVitals.js":"2","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Router.js":"3","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/CreateSessionForm.js":"4","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Homepage.js":"5","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Dashboard.js":"6","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/LoginForm.js":"7","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/NavBar.js":"8","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Profile.js":"9","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditUser.js":"10","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditSession.js":"11","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EmailRegistration.js":"12","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/PasswordReset.js":"13","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserCard.js":"14","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserSessions.js":"15","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SessionListing.js":"16","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SignUpForm.js":"17","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/AdminPortal.js":"18","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Errors.js":"19","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserTableListing.js":"20","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/utility.js":"21","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Filters.js":"22","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SessionFilters.js":"23","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Subjects.js":"24","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Chat.js":"25","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/CreateSubject.js":"26","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/AdminRouter.js":"27","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Hooks/socketContext.js":"28"},{"size":986,"mtime":1619104979376,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1608217291778,"results":"31","hashOfConfig":"30"},{"size":2907,"mtime":1621375741214,"results":"32","hashOfConfig":"30"},{"size":4920,"mtime":1621296976405,"results":"33","hashOfConfig":"30"},{"size":1632,"mtime":1613588057412,"results":"34","hashOfConfig":"30"},{"size":5824,"mtime":1621299265406,"results":"35","hashOfConfig":"30"},{"size":1947,"mtime":1619104983228,"results":"36","hashOfConfig":"30"},{"size":2702,"mtime":1617147299171,"results":"37","hashOfConfig":"30"},{"size":4241,"mtime":1621376728861,"results":"38","hashOfConfig":"30"},{"size":5036,"mtime":1621377220726,"results":"39","hashOfConfig":"30"},{"size":4645,"mtime":1618403120889,"results":"40","hashOfConfig":"30"},{"size":1112,"mtime":1613594124911,"results":"41","hashOfConfig":"30"},{"size":2787,"mtime":1615333189429,"results":"42","hashOfConfig":"30"},{"size":787,"mtime":1621299475153,"results":"43","hashOfConfig":"30"},{"size":7056,"mtime":1621365931735,"results":"44","hashOfConfig":"30"},{"size":2862,"mtime":1618365892607,"results":"45","hashOfConfig":"30"},{"size":10027,"mtime":1621379630820,"results":"46","hashOfConfig":"30"},{"size":4159,"mtime":1621365698564,"results":"47","hashOfConfig":"30"},{"size":777,"mtime":1614041680763,"results":"48","hashOfConfig":"30"},{"size":1402,"mtime":1617125349370,"results":"49","hashOfConfig":"30"},{"size":829,"mtime":1618065197556,"results":"50","hashOfConfig":"30"},{"size":8526,"mtime":1621299364073,"results":"51","hashOfConfig":"30"},{"size":3583,"mtime":1617145419999,"results":"52","hashOfConfig":"30"},{"size":1417,"mtime":1621298309983,"results":"53","hashOfConfig":"30"},{"size":6827,"mtime":1621294175069,"results":"54","hashOfConfig":"30"},{"size":2432,"mtime":1617139882985,"results":"55","hashOfConfig":"30"},{"size":397,"mtime":1621375636430,"results":"56","hashOfConfig":"30"},{"size":172,"mtime":1619103426014,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"f6ylb9",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"61"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"61"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"61"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"61"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"61"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"61"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"61"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"61"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/index.js",["137"],"import React, { useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './component_styling/main.scss'\nimport axios from 'axios'\nimport AppRouter from './Components/Router'\n\nexport const axios_instance = axios.create({\n  baseURL: 'http://localhost:5000'\n});\n\naxios_instance.interceptors.request.use(\n  function (config) {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers[\"Authorization\"] = 'Bearer ' + token;\n    }\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\n\nReactDOM.render(\n    <React.StrictMode>\n      <AppRouter />\n    </React.StrictMode>,\n      document.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://it.ly/CRA-vitals\nreportWebVitals();\n//export default socket;\n",["138","139"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/reportWebVitals.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Router.js",["140","141","142","143","144","145","146","147"],"import React, { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport CreateSessionForm from \"./CreateSessionForm\";\nimport Dashboard from \"./Dashboard\";\nimport HomePage from \"./Homepage\";\nimport LoginForm from \"./LoginForm\";\nimport NavBar from \"./NavBar\";\nimport Profile from \"./Profile\";\nimport SignUpForm from \"./SignUpForm\";\nimport EditUser from './EditUser'\nimport jwt from 'jsonwebtoken';\nimport EditSessionForm from \"./EditSession\";\nimport Chat from \"./Chat\"\nimport EmailRegistration from \"./EmailRegistration\";\nimport PasswordReset from \"./PasswordReset\";\nimport AdminPortal from \"./AdminPortal\";\nimport Errors from \"./Errors\"\nimport AdminRouter from \"../AdminRouter\";\nimport {verifyJWT} from \"../utility\"\nimport {SocketContext, socket} from '../Hooks/socketContext'\n\nconst AppRouter = () => {\n  const jwt = verifyJWT();\n  return (\n    <BrowserRouter>\n      <div>\n        <NavBar />\n        <Switch>\n          <Route path=\"/\" component={HomePage} exact />\n          <Route path=\"/finalize_registration\" component={EmailRegistration} exact />\n          <Route exact path=\"/reset_password\" component={PasswordReset} />\n          <Route path=\"/sign_up\" component={SignUpForm} exact />\n          <Route path=\"/sign_in\" component={LoginForm} exact />\n          <Route path=\"/dashboard\" exact>\n            {jwt ? <Dashboard /> : <Errors error={401} />}\n          </Route>\n          <Route path=\"/user/create_session\" exact>\n            {jwt ? <CreateSessionForm /> : <Errors error={401} />}\n          </Route>\n          <Route exact path=\"/user/sessions/:session/edit\" component={EditSessionForm} />\n          <Route exact path=\"/user/:username\" render={({ match }) => {\n            return (\n              <div>\n                {jwt ? <Profile  /> : <Errors error={401} />}\n              </div>\n            )\n          }} />\n          <Route exact path=\"/user/:username/edit\" render={({ match }) => {\n            return (\n              <div>\n                {jwt && match.params.username == jwt.username || jwt.rls.includes('admin') ? <EditUser /> : <Errors error={401} />}\n              </div>\n            )\n          }} />\n\n          <Route exact path=\"/user/:username/chat\" render={({ match }) => {\n            return (\n\t\t\t\t<SocketContext.Provider value={socket}>\n                {jwt && (match.params.username == jwt.username || jwt.rls.includes('admin')) ? <Chat /> : <Errors error={401} />}\n\t\t\t\t</SocketContext.Provider>\n            )\n          }} />\n          <Route path=\"/admin\" render={({ match }) => {\n            return (\n              <div>\n              {jwt && jwt.rls.includes('admin') ? <AdminRouter /> : <Errors error={401} />}\n\t\t\t  </div>\n            )\n            }}/>\n          <Route>\n            <Errors error={404} />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default AppRouter;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/CreateSessionForm.js",["148","149","150","151","152","153"],"import React, { useEffect, useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport TimePicker from 'react-time-picker'\nimport { useHistory } from 'react-router-dom'\nimport { axios_instance } from '..';\nimport Select from 'react-select';\nimport Subjects from './Subjects';\nimport { verifyJWT } from '../utility';\nimport \"../../node_modules/react-time-picker/dist/TimePicker.css\";\nimport \"../../node_modules/react-clock/dist/Clock.css\";\n\nconst CreateSessionForm = () => {\n\n  const history = useHistory();\n  const [date, setDate] = useState('')\n  const [time, setTime] = useState('')\n  const [endTime, setEndTime] = useState('')\n  const [subject, setSubject] = useState('')\n  const [user_list, set_user_list] = useState([])\n  const [other_user, setOtherUser] = useState({})\n  const [errors, setErrors] = useState('')\n\n  const jwt = verifyJWT();\n  useEffect(() => {\n    if (jwt.rls.includes('tutor')) {\n      axios_instance.get('http://127.0.0.1:5000/user/students')\n        .then(function (response) {\n          return response.data.filter(user => user.username != jwt.username)\n        })\n        .then(function (response) {\n          console.log(response)\n          set_user_list([...user_list, ...response])\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n    if (jwt.rls.includes('student')) {\n      axios_instance.get('http://127.0.0.1:5000/user/tutors')\n        .then(function (response) {\n          return response.data.filter(user => user.username != jwt.username)\n        })\n        .then(function (response) {\n          set_user_list([...user_list, ...response])\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }, [])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const session = {\n      subject: subject,\n      date: formatDateTime(date, time),\n      end_date: formatDateTime(date, endTime),\n      other_user: other_user\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    axios_instance.post('http://127.0.0.1:5000/user/sessions/new', session, config)\n      .then((res) => {\n        history.push(`/user/${jwt.username}`)\n      }).catch((err) => {\n        console.log(err)\n      })\n\n\n  }\n\n  const handleDayClick = (day, { selected }) => {\n    const selectedDay = selected ? undefined : day;\n    setDate(selectedDay)\n  }\n\n  const handleSelect = (selected) => {\n    setOtherUser(selected)\n  }\n\n  const onTimeChange = (time) => {\n    setTime(time)\n  }\n\n  const onEndTimeChange = (time) => {\n    setEndTime(time)\n  }\n  const formatDateTime = (date, time) => {\n    const hour = parseInt(time.substring(0, 1)) == 0 ? parseInt(time.substring(1, 2)) : parseInt(time.substring(0, 2))\n    const minutes = time.substring(2)\n    const amPM = hour < 12 ? 'AM' : 'PM'\n    const formatted_hour = hour > 12 ? hour - 12 : hour;\n    time = formatted_hour + minutes + \" \" + amPM\n    return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear() + \" \" + time;\n  }\n\n\n\n  return (\n    <div className=\"form-comp\">\n      <h1>Set up a Session</h1>\n      <Form onSubmit={handleSubmit}>\n        <Subjects subject={subject} onSelect={setSubject} />\n\n        <Form.Group controlId=\"session_attendee\">\n          <Form.Label>{jwt.rls.includes('tutor') ? 'Student' : 'Tutor'}</Form.Label>\n          <Select\n            className=\"select center\"\n            onChange={handleSelect}\n            options={user_list}\n            getOptionLabel={(option) => option.username}\n            getOptionValue={(option) => option._id}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label className=\"block-label\">Date</Form.Label>\n          <div>\n            <DayPickerInput\n              className=\"calendar\"\n              disabledDays={{ before: new Date() }}\n              format=\"M/D/YYYY\"\n              name=\"date\"\n              id=\"date\"\n              inputProps={\n                { required: true }\n              } \n              onDayClick={handleDayClick}\n              selectedDays={date}\n            />\n          </div>\n        </Form.Group>\n\n        <div>\n          <Form.Label className=\"block-label\">Start Time: </Form.Label>\n          <TimePicker\n            name=\"time\"\n            id=\"time\"\n            required={true}\n            disableClock={true}\n            onChange={onTimeChange}\n            value={time}\n          />\n\n\n\n          <Form.Label className=\"block-label\">End Time: </Form.Label>\n          <TimePicker\n            name=\"end_time\"\n            id=\"end_time\"\n            required={true}\n            disableClock={true}\n            onChange={onEndTimeChange}\n            value={endTime}\n          />\n        </div>\n        <Button variant=\"primary\" type=\"submit\">Submit</Button>\n      </Form>\n    </div>);\n}\n\nexport default CreateSessionForm;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Homepage.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Dashboard.js",["154","155","156","157","158","159","160","161"],"import React, { useState, useEffect } from 'react'\nimport { axios_instance } from '..'\nimport UserCard from './UserCard'\nimport ReactPaginate from 'react-paginate'\nimport { Form } from 'react-bootstrap'\nimport ReactLoading from 'react-loading';\nimport Filters from './Filters'\nimport {verifyJWT} from '../utility'\n//Add support for som1 who is tutor + student\nconst Dashboard = (props) => {\n  const jwt = verifyJWT();\n  const [userList, setUserlist] = useState({\n    userList: [],\n    filtered: [],\n    displayed: []\n  })\n\n  const [offset, setOffset] = useState(0)\n  const [loading, setLoading] = useState(true);\n\n  const [filters, setFilters] = useState({\n    username: '',\n    fullName: '',\n    subject: '',\n    type: ''\n  })\n\n  const perPage = 20;\n  const pageCount = Math.ceil(userList.userList.length) / perPage;\n\n\n  useEffect(() => {\n    const filtered = userList.userList.filter((user) => {\n      setLoading(true);\n      const usernameCheck = user.username.toLowerCase().includes(filters.username);\n      const subjectCheck = user.roles.includes(\"tutor\") && user.tutoring_subjects ? user.tutoring_subjects.includes(filters.subject) : user.problem_subjects ? user.problem_subjects.includes(filters.subject) : false;\n      const typeCheck = user.roles.includes(filters.type);\n      const fullNameCheck = user.full_name.toLowerCase().includes(filters.fullName.toLowerCase());\n      let allChecks = true;\n\n      if (filters.username) {\n        allChecks = allChecks && usernameCheck;\n      }\n      if (filters.subject) {\n        allChecks = allChecks && subjectCheck;\n      }\n      if (filters.fullName) {\n        allChecks = allChecks && fullNameCheck;\n      }\n      if (filters.type) {\n        allChecks = allChecks && typeCheck;\n      }\n      return allChecks\n    })\n    setLoading(false);\n    setUserlist({ ...userList, filtered: filtered, displayed: filtered.slice(0, perPage) })\n  }, [filters])\n\n\n  useEffect(() => {\n    if (jwt && jwt.rls.includes('student') && jwt.rls.includes('tutor') || jwt.rls.includes('admin')) {\n      axios_instance.get('http://127.0.0.1:5000/user')\n        .then((res) => {\n          return res.data.filter(user => user.username != props.username)\n        })\n        .then((response) => {\n          setUserlist({ ...userList, userList: response, filtered: response, displayed: response.slice(0, perPage) })\n        })\n        .then(() => {\n          setLoading(false);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n    else if (jwt && jwt.rls.includes('tutor')) {\n      axios_instance.get('http://127.0.0.1:5000/user/students')\n        .then((res) => {\n          return res.data.filter(user => user.username != props.username)\n        })\n        .then(function (response) {\n          setUserlist({ ...userList, userList: response, filtered: response, displayed: response.slice(0, perPage) })\n        })\n        .then(() => {\n          setLoading(false);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n    else if (jwt && jwt.rls.includes('student')) {\n      axios_instance.get('http://127.0.0.1:5000/user/tutors')\n        .then((res) => {\n          return res.data.filter(user => user.username != jwt.username)\n        })\n        .then(function (response) {\n          setUserlist({ ...userList, userList: response, filtered: response, displayed: response.slice(0, perPage) })\n        })\n        .then(() => {\n          setLoading(false);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }, [])\n\n\n\n  const handlePageClick = (e) => {\n    let selected = e.selected;\n    setOffset(Math.ceil(selected * perPage));\n    setUserlist({ ...userList, displayed: perPage >= userList.filtered.length ? userList.filtered.slice(offset, userList.filtered.length) : userList.filtered.slice(offset, offset + 2) })\n  };\n\n\n  const userDash = userList.displayed.map((user) => {\n    return (\n      <UserCard className=\"user_card\" profile_picture = {user.profile_picture} key={user._id.$oid} full_name={user.full_name} username={user.username} bio={user.biography} />\n    )\n  })\n\n  const setRoleFilter = (e) => {\n    setFilters({ ...filters, type: e.target.value })\n  }\n\n  return (\n    <div>\n      <h1>Users</h1>\n      <div>\n        <Filters users={userList} offset={offset} perPage={perPage} setUsers={setUserlist} />\n        {\n          jwt.rls.includes(\"tutor\") && jwt.rls.includes(\"student\") ? (\n            <Form className=\"form-comp\">\n              <Form.Group controlId=\"role\">\n                <Form.Check\n                  inline\n                  value=\"tutor\"\n                  name=\"role\"\n                  label=\"Tutor\"\n                  type=\"radio\"\n                  id=\"tutor\"\n                  onClick={setRoleFilter}\n                />\n                <Form.Check\n                  inline\n                  value=\"student\"\n                  name=\"role\"\n                  label=\"Student\"\n                  type=\"radio\"\n                  id=\"student\"\n                  onClick={setRoleFilter}\n                />\n              </Form.Group>\n              </Form>) : null\n         \n}\n      </div>\n\n      {loading && <ReactLoading type={\"spin\"} color={\"white\"} height={'10%'} width={'10%'} className=\"loading_spinner\" />}\n      {userDash.length != 0 ? <div className=\"userdash\">{userDash}</div> : <h3>No matching users found</h3>}\n\n\n      <ReactPaginate\n        pageCount={pageCount}\n        pageRangeDisplayed={5}\n        marginPagesDisplayed={5}\n        onPageChange={handlePageClick}\n        containerClassName={'pagination'}\n        subContainerClassName={'pages pagination'}\n        activeClassName={'active'}\n        previousLabel={'Previous'}\n        nextLabel={'Next'}\n        breakLabel={'...'}\n      />\n\n    </div >\n  )\n}\n\n\nexport default Dashboard;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/LoginForm.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/NavBar.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Profile.js",["162","163","164","165","166","167","168","169","170","171","172","173","174"],"import React, { useEffect, useState } from 'react'\nimport { Link, useParams } from \"react-router-dom\";\nimport { axios_instance } from '../index'\nimport DayPicker from \"react-day-picker\";\nimport UserSessions from './UserSessions';\nimport { Row, Col, Container } from 'react-bootstrap'\nimport ReactLoading from 'react-loading';\nimport { verifyJWT } from '../utility';\nimport axios from 'axios';\n//View for viewing own profile and someone else viewing profile\nconst Profile = () => {\n    let { username } = useParams();\n    const [user, set_user] = useState('');\n    const [loading, setLoading] = useState(true);\n\n    const jwt = verifyJWT();\n\n    useEffect(() => {\n        const config = {\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n\n\n        axios_instance.get(`/user/${username}`, config)\n            .then((res) => {\n                const parsed_dates = res.data.availability.map((date) => {\n                    const milliseconds = date.$date;\n                    const parsed_date = new Date(milliseconds)\n                    return parsed_date;\n                })\n                res.data.availability = parsed_dates;\n                set_user(res.data);\n\t\t\t\tconsole.log(res.data)\n            })\n            .then(() => {\n                setLoading(false);\n            })\n    }, [])\n\n    const addDefaultSrc = (e) => {\n        e.preventDefault();\n        console.log(e.target)\n        e.target.src = `http://localhost:5000/profile_pictures/placeholder.jpg`\n    }\n    return (\n        <div>\n            <div>\n                {loading && <ReactLoading type={\"spin\"} color={\"white\"} height={'10%'} width={'10%'} className=\"loading_spinner\" />}\n                <h1>{user.full_name}</h1>\n                {user.profile_picture ? <img className=\"profile_picture\" src={`http://localhost:5000/${user.profile_picture}`} onError={addDefaultSrc} alt=\"Profile Picture\"></img> : <img className=\"profile_picture\" src=\"http://localhost:5000/profile_pictures/placeholder.jpg\"></img>}\n                <h2 className=\"subtitle\">@{username}</h2>\n                <p>{username != jwt.username && <Link to={{ pathname: `/user/${jwt.username}/chat` }}>Chat</Link>}</p>\n                {\n                    (username == jwt.username || jwt.rls.includes('admin')) && (\n                        <Link to={{\n                            pathname: `/user/${username}/edit`,\n                            state: {\n                                user: {\n                                    ...user\n                                }\n                            }\n                        }}>Edit\n                        </Link>)\n                }\n                <div className=\"about-div\">\n                    <p className=\"bio\">{user.biography}</p>\n                </div>\n                <hr />\n\n                {jwt && username == jwt.username || jwt.rls.includes('admin') ?\n                        <div className=\"profile-items\">\n                            <div className=\"calendar-container\">\n                                <h3>Availability</h3>\n                                <DayPicker\n                                    className=\"calendar\"\n                                    format=\"MM/DD/YYYY\"\n                                    selectedDays={user.availability}\n                                    name=\"availability\"\n                                />\n                            </div>\n                            <div className=\"user_sessions\">\n                                {(username == jwt.username || jwt.rls.includes('admin')) ? <div><h3>Sessions</h3><UserSessions /></div> : ''}\n                            </div>\n                        </div>\n                    : <div>\n                        <h3>Availability</h3>\n                        <DayPicker\n                            className=\"calendar\"\n                            format=\"MM/DD/YYYY\"\n                            selectedDays={user.availability}\n                            name=\"availability\"\n                        />\n                    </div>}\n            </div>\n        </div>\n    )\n\n}\n\nexport default Profile;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditUser.js",["175","176","177"],"import React, { useEffect, useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useParams, useHistory } from \"react-router-dom\";\nimport{ DateUtils } from \"react-day-picker\";\nimport DayPicker from 'react-day-picker/DayPicker';\nimport { axios_instance } from '..';\nimport { verifyJWT } from '../utility';\n\nconst EditUser = (props) => {\n  let { username } = useParams();\n  const jwt = verifyJWT()\n\n  const history = useHistory();\n  const [dates, setDates] = useState([])\n  const [user, set_user] = useState({});\n\n\n  useEffect(() => {\n    if(props && props.location &&  props.location.state.user) {\n      set_user(props.location.state.user)\n    }\n    else {\n    axios_instance.get(`/user/${username}`).then((res) => {\n      set_user(res.data);\n    })\n  }\n  }, [])\n\n  const handleChange = (e) => {\n    const updated_user = {\n      ...user,\n      [e.target.id]: e.target.value\n    }\n    set_user(updated_user)\n  }\n\n  const deleteUser = () => {\n    history.push(\"/\");\n    axios_instance.delete(`http://127.0.0.1:5000/user/${username}/edit`)\n    .catch((err)=>{\n      console.log(err)\n    })\n\n  }\n\n  const handleDayClick = (day, { selected }) => {\n    const arr = [...dates];\n    if (selected) {\n      const selectedIndex = arr.findIndex(selectedDay =>\n        DateUtils.isSameDay(selectedDay, day)\n      );\n      arr.splice(selectedIndex, 1);\n      setDates(arr);\n    }\n    else {\n      setDates([...dates, day]);\n    }\n  }\n\n  const parse_dates = (date_list) => {\n    console.log(date_list)\n    return date_list.map((date) => {\n      return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n    })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let parsed_availability = []\n    if (dates.length!==0) {\n     parsed_availability = parse_dates(dates);\n    }\n    const edited_user = {\n      email: user.email,\n      full_name: user.full_name,\n      username: user.username,\n      biography: user.biography,\n      roles: user.roles,\n      availability: parsed_availability,\n      us_phone_number: user.us_phone_number\n    }\n    const config = {\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    }\n    axios_instance.post(`http://127.0.0.1:5000/user/${username}/edit`, edited_user, config)\n      .then(function (res) {\n        if(jwt.username==username){\n        localStorage.setItem(\"token\", res.data.access_token)\n        }\n        history.push(\"/\");\n        window.location.reload(true)\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  return (\n    <div >\n      <h1>Edit</h1>\n      <Form className=\"form-comp\" onSubmit={handleSubmit}>\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control type=\"email\" value={user.email || ' '} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"username\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control type=\"text\" value={user.username || ' '} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"us_phone_number\">\n          <Form.Label>Phone Number</Form.Label>\n          <Form.Control type=\"tel\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" value={user.us_phone_number || ''} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"biography\">\n          <Form.Label>Tell us about yourself!</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} value={user.biography || ' '} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"role\">\n          <Form.Check\n            inline\n            value=\"tutor\"\n            name=\"roles\"\n            label=\"Tutor\"\n            type=\"radio\"\n            id=\"roles\"\n            onClick={handleChange}\n          />\n          <Form.Check\n            inline\n            value=\"student\"\n            name=\"role\"\n            label=\"Student\"\n            type=\"radio\"\n            id=\"roles\"\n            onClick={handleChange}\n          />\n\n          <Form.Check\n            inline\n            value=\"student,tutor\"\n            name=\"role\"\n            label=\"Both\"\n            type=\"radio\"\n            id=\"both\"\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"availability\">\n          <Form.Label>Availability</Form.Label>\n          <DayPicker\n            className=\"calendar\"\n            format=\"MM/DD/YYYY\"\n            name=\"availability\"\n            onDayClick={handleDayClick}\n            selectedDays={dates}\n\t\t\tdisabledDays={{ before: new Date() }}\n          />\n\n        </Form.Group>\n\t\t\n        <Form.Group>\n          <a className=\"delete-link\" onClick={deleteUser}>Delete</a>\n        </Form.Group>\n        <Form.Group>\n          <span>Forgot password? Click<a href=\"/reset_password\"> Here</a></span>\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>);\n}\n\nexport default EditUser;\n\n","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditSession.js",["178","179","180","181","182"],"import React, { useEffect, useState } from 'react';\nimport { Form, Button, Dropdown } from 'react-bootstrap'\nimport { useHistory } from \"react-router-dom\";\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport { axios_instance } from '..';\nimport Select from 'react-select'\nimport \"../../node_modules/react-time-picker/dist/TimePicker.css\";\nimport \"../../node_modules/react-clock/dist/Clock.css\";\nimport TimePicker from 'react-time-picker'\nimport Subjects from './Subjects';\n\n\nconst EditSessionForm = (props) => {\n  const history = useHistory();\n  const [endTime, setEndTime] = useState('');\n  const [time, setTime] = useState('');\n  const [session, setSession] = useState(props.location.state.session);\n  const [errors, setErrors] = useState('');\n  const handleErrors = () => {\n    if (!time || !endTime || time > endTime) {\n      setErrors('Invalid time');\n    }\n    else {\n      setErrors('')\n    }\n    return errors;\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    handleErrors();\n    if (!errors) {\n      const endDateTime = formatDateTime(session.date, endTime);\n      const startDateTime = formatDateTime(session.date, time)\n      const edited_session = {\n        ...session,\n        end_time: endDateTime,\n        date: startDateTime,\n      }\n\n      const config = {\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      }\n\n      axios_instance.post(`/user/sessions/${session._id.$oid}/edit`, { ...edited_session, tutor_confirmed: false, student_confirmed: false }, config)\n        .then(() => {\n          history.push(`/`)\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }\n\n\n  const handleDayClick = (day, { selected }) => {\n    const selectedDay = selected ? undefined : day;\n    const updated_session = { ...session, date: selectedDay }\n    setSession(updated_session);\n  }\n\n  const onTimeChange = (time) => {\n    setTime(time);\n  }\n\n  const onEndTimeChange = (time) => {\n    setEndTime(time);\n  }\n  const formatDateTime = (date, time) => {\n    const hour = parseInt(time.substring(0, 1)) == 0 ? parseInt(time.substring(1, 2)) : parseInt(time.substring(0, 2))\n    const minutes = time.substring(2)\n\n\n    const amPM = hour < 12 ? 'AM' : 'PM'\n    const formatted_hour = hour > 12 ? hour - 12 : hour < 10 ? \"0\" + hour : hour;\n    time = formatted_hour + minutes + \" \" + amPM\n\n    return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear() + \" \" + time;\n  }\n\n  const onDropdownSelect = (eventKey) => {\n    setSession({ ...session, subject: eventKey });\n  }\n\n  const handleChange = (e) => {\n    const updated_session = {\n      ...session,\n      [e.target.id]: e.target.value\n    }\n    setSession(updated_session)\n  }\n\n  return (\n    <div className=\"form-comp-container\">\n      <div className=\"form-comp\">\n        <h1>Edit Session</h1>\n        <span className=\"errors\">{errors}</span>\n        <Form onSubmit={handleSubmit}>\n          <Subjects onSelect={onDropdownSelect} subject={session.subject} />\n          <Form.Group controlId=\"tutor\">\n            <Form.Label>Tutor</Form.Label>\n            <Form.Control type=\"text\" value={session.tutor.username} />\n          </Form.Group>\n\n          <Form.Group controlId=\"student\">\n            <Form.Label>Student</Form.Label>\n            <Form.Control type=\"text\" value={session.student.username} />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Date</Form.Label>\n            <DayPickerInput\n              className=\"calendar\"\n              // disabledDays={{ before: new Date() }}\n              format=\"M/D/YYYY\"\n              name=\"date\"\n              id=\"date\"\n              onDayClick={handleDayClick}\n              selectedDays={new Date(session.date)}\n            />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label className=\"block-label\">Start Time</Form.Label>\n            <TimePicker\n              name=\"time\"\n              id=\"time\"\n              disableClock={true}\n              onChange={onTimeChange}\n              value={time}\n            />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label className=\"block-label\">End Time</Form.Label>\n            <TimePicker\n              name=\"end_time\"\n              id=\"end_time\"\n              disableClock={true}\n              onChange={onEndTimeChange}\n              value={endTime}\n            />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">Submit</Button>\n        </Form>\n      </div>\n    </div>);\n}\n\n\nexport default EditSessionForm;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EmailRegistration.js",["183"],"import React, { useEffect} from 'react'\nimport {useLocation, useHistory} from 'react-router-dom'\nimport axios from 'axios'\n\nconst EmailRegistration = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const token = location.search.substr(7);\n    console.log(token)\n    const config = {\n        crossDomain: true,\n        headers: {\n          'Authorization':  ` Bearer ${token}`\n      }\n      }\n    useEffect(()=>{\n        axios.get('http://127.0.0.1:5000/finalize', config)\n       .then((res)=>{\n            // if(res.data.access_token){\n                setTimeout(()=>{\n                    localStorage.clear()\n                    localStorage.setItem(\"token\", res.data.access_token);\n                    history.push(\"/\")\n                    window.location.reload(true)\n                }, 2000)\n           // }\n        })\n        .catch((err)=>{\n            console.log(token)\n            console.log(err);\n        })\n\n    }, [])\n    return (\n    <div>\n        <h1>Successful registration</h1>\n        <p>Redirecting home...</p>\n    </div>)\n}\n\nexport default EmailRegistration;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/PasswordReset.js",["184"],"\nimport React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport axios from 'axios'\n\nconst PasswordReset = () => {\n    const history = useHistory();\n    const location = useLocation();\n    const token = location.search.substr(7);\n    const [passwordEmailSent, setPasswordEmailSent] = useState(false)\n    const resetPassword = (e) => {\n        e.preventDefault();\n        const config = {\n            crossDomain: true,\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            }\n        }\n\n        axios.post('http://127.0.0.1:5000/reset_password', { password: e.target.new_pass.value, confirmNewPassword: e.target.confirm_new_pass.value }, config)\n            .then((res) => {\n                history.push(`/`)\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    const sendResetEmail = (e) => {\n        const config = {\n            crossDomain: true,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n        e.preventDefault();\n        const data = {\n            email: e.target.email.value\n        }\n        axios.post('http://127.0.0.1:5000/send_password_email', data, config)\n            .then((res) => {\n                setPasswordEmailSent(true);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    return (\n        <div>\n            <h1>Reset Your Password</h1>\n            { token ?\n                (\n\n                    <Form onSubmit={resetPassword}>\n                        <Form.Group controlId=\"new_pass\">\n                            <Form.Label>New password</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"confirm_new_pass\">\n                            <Form.Label>Confirm new password</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n                        <Button type=\"submit\">Submit</Button>\n                    </Form>\n                )\n                :\n                (\n                    <Form onSubmit={sendResetEmail}>\n                        {passwordEmailSent && <span className=\"flavor_text\">Password Reset Email Sent</span>}\n                        <Form.Group controlId=\"email\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n                        <Button type=\"submit\">Send</Button>\n                    </Form>)\n            }\n        </div>\n    )\n}\n\nexport default PasswordReset;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserCard.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserSessions.js",["185","186","187","188","189","190","191","192","193","194","195","196"],"import React, { useEffect, useState } from 'react'\nimport { propTypes } from 'react-bootstrap/esm/Image';\nimport { useParams } from 'react-router-dom'\nimport { axios_instance } from '..'\nimport {Table} from 'react-bootstrap'\nimport SessionListing from './SessionListing';\nimport SessionFilters from './SessionFilters'\nimport ReactPaginate from 'react-paginate'\n\nconst UserSessions = (props) => {\n    let { username } = useParams();\n    const perPage = props.perPage ? props.perPage : 1;\n    const [sessions_list, set_sessions_list] = useState({\n        raw_sessions: [],\n        displayed_sessions: [],\n        filtered: []\n    })\n    //Filtered is not neeeded with offset\n    //Put session list in var and change it when offset state changes\n    const [offset, setOffset] = useState(0)\n    const [filters, setFilters] = useState({\n        tutorFilter: '',\n        studentFilter: '',\n        sessionSubjectFilter: '',\n        startDateFilter: null,\n        startTimeFilter: null,\n        endTimeFilter: null\n    })\n    const pageCount = Math.ceil(sessions_list.filtered.length) / perPage;\n\n    const formatDateTime = (date, time) => {\n        const month = date.getMonth() < 10 ? \"0\" + (date.getMonth() + 1) : (date.getMonth() + 1);\n        const day = date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\n        const formattedDate = date.getFullYear() + \"-\" + month + \"-\" + day;\n        const formattedTime = \"T\" + time + \":00\"\n        return new Date(formattedDate + formattedTime);\n    }\n\n    useEffect(() => {\n        const filteredSessions = sessions_list.raw_sessions.filter((session) => {\n            let allChecks = true;\n            allChecks = filters.tutorFilter ? (session.tutor.username.includes(filters.tutorFilter) ? allChecks : false) : allChecks;\n            allChecks = filters.studentFilter ? (session.student.username.includes(filters.studentFilter) ? allChecks : false) : allChecks;\n            if (filters.startDateFilter) {\n                const sessionDate = new Date(session.date.$date);\n                const sameDate = filters.startDateFilter.getDate() == sessionDate.getDate()\n                    && filters.startDateFilter.getFullYear() == sessionDate.getFullYear()\n                    && filters.startDateFilter.getMonth() == sessionDate.getMonth();\n                allChecks = sameDate ? allChecks : false\n\n                if (filters.startTimeFilter) {\n                    const startDateTime = formatDateTime(filters.startDateFilter, filters.startTimeFilter);\n                    allChecks = sameDate && startDateTime.getHours() == sessionDate.getHours() && startDateTime.getMinutes() == sessionDate.getMinutes() ? allChecks : false\n                }\n\n                if (filters.endTimeFilter) {\n                    const endDateTime = formatDateTime(filters.startDateFilter, filters.endTimeFilter);\n                    const sessionEndDate = new Date(session.end_time.$date)\n                    allChecks = sameDate && endDateTime.getHours() == sessionEndDate.getHours() && endDateTime.getMinutes() == sessionEndDate.getMinutes() ? allChecks : false\n                }\n            }\n            allChecks = filters.sessionSubjectFilter ? (filters.sessionSubjectFilter == session.subject ? allChecks : false) : allChecks;\n            return allChecks;\n\n        })\n\n        set_sessions_list({ ...sessions_list, displayed_sessions: perPage >= filteredSessions.length ? filteredSessions.slice(offset, filteredSessions.length) : filteredSessions.slice(offset, offset + perPage), filtered: filteredSessions })\n    }, [filters.studentFilter, filters.tutorFilter, filters.startDateFilter, filters.startTimeFilter, filters.endTimeFilter, filters.sessionSubjectFilter])\n\n\n\n\n    useEffect(() => {\n        const config = {\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n\n        if (username) {\n            axios_instance.get(`http://127.0.0.1:5000/user/${username}/sessions`, config)\n                .then((res) => {\n                    console.log(res.data)\n                    set_sessions_list({\n                        raw_sessions: res.data,\n                        displayed_sessions: res.data.slice(0, perPage),\n                        filtered: res.data\n                    })\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n        else {\n            axios_instance.get(`http://127.0.0.1:5000/sessions`, config)\n                .then((res) => {\n                    set_sessions_list({\n                        raw_sessions: res.data,\n                        displayed_sessions: res.data.slice(0, perPage),\n                        filtered: res.data\n                    })\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    }, [])\n\n    //Update display when page clicked\n    useEffect(() => {\n        set_sessions_list({ ...sessions_list, displayed_sessions: offset + perPage >= sessions_list.filtered.length ? sessions_list.filtered.slice(offset, sessions_list.filtered.length) : sessions_list.filtered.slice(offset, offset + perPage) })\n    }, [offset])\n\n    const handlePageClick = (e) => {\n        let selected = e.selected;\n        setOffset(Math.ceil(selected * perPage));\n    };\n\n    const sessions = sessions_list.displayed_sessions.map((session) => (\n        <SessionListing key={session._id.$oid} session={session} mode={!username ? \"listing\" : \"card\"} />\n    ))\n\n    return (\n        <div>\n            <div>\n                {!username && <SessionFilters sessions={sessions_list.raw_sessions} filters={filters} setFilters={setFilters} />}\n                {sessions.length !== 0 ? !username ? (\n                    <Table responsive striped bordered hover variant=\"dark\">\n                        <thead>\n                            <tr>\n                                <th>Student</th>\n                                <th>Tutor</th>\n                                <th>Subject</th>\n                                <th>Start Time</th>\n                                <th>End Time</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {sessions}\n                            </tbody>\n                    </Table>\n                ) : sessions : <h3>No sessions scheduled</h3>}\n            </div>\n            <ReactPaginate\n                pageCount={pageCount}\n                pageRangeDisplayed={5}\n                marginPagesDisplayed={5}\n                onPageChange={handlePageClick}\n                containerClassName={'pagination'}\n                subContainerClassName={'pages pagination'}\n                activeClassName={'active'}\n                previousLabel={'Previous'}\n                nextLabel={'Next'}\n                breakLabel={'...'}\n            />\n        </div>\n    )\n}\n\nexport default UserSessions;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SessionListing.js",["197","198","199","200","201","202","203","204","205"],"import React, {useState} from 'react';\nimport { Link } from 'react-router-dom'\nimport { Card, Button } from 'react-bootstrap';\nimport { parseDate, parseTime, verifyJWT } from '../utility'\nimport {axios_instance} from '../index'\nconst SessionListing = (props) => {\n  //wrong time\n  const mode = props.mode;\n  const jwt = verifyJWT();\n  const [confirmed, setConfirmed] = useState({\n\t  tutor_confirmed: props.session.tutor_confirmed,\n\t  student_confirmed: props.session.student_confirmed\n  });\n\n  if(jwt.username==props.session.tutor.username && !confirmed.tutor_confirmed){\n    console.log(\"T\")\n  }\n  else if ((jwt.username==props.session.student.username && !confirmed.student_confirmed)){\n    console.log(\"S\")\n  }\n\n  const confirmSession = () => {\n    let confirmation = {};\n    if(jwt.username==props.session.tutor.username){\n      confirmation.tutor_confirmed = true;\n    }\n    else if(jwt.username==props.session.student.username){\n      confirmation.student_confirmed = true;\n    }\n    axios_instance.post(`/user/sessions/${props.session._id.$oid}/edit`, confirmation)\n    .then((res)=>{\n     setConfirmed({tutor_confirmed: res.data.tutor_confirmed, student_confirmed: res.data.student_confirmed});\n    })\n    .catch((err)=>{\n      console.log(err)\n    })\n  }\n\n\n  //add captcha\n  return (\n    props.mode === \"card\" ?\n      (<div className=\"center\">\n        <Card className=\"card session\">\n          <Card.Body>\n            <Card.Title className=\"card-title\">{props.session.subject} Session with Student @{props.session.student.username}</Card.Title>\n            <Card.Text>\n              <span id=\"tutor\">Tutor: @{props.session.tutor.username}</span>\n              <p id=\"date\">{\n                parseDate(props.session.date.$date)\n              } to <span id=\"end_time\">{parseTime(props.session.end_time.$date)}</span></p>\n              <p>Confirmation Status: {(confirmed.tutor_confirmed && confirmed.student_confirmed) ? \"Confirmed\" : \"Not Confirmed\"} </p>\n\n              {\n                ((jwt.username==props.session.tutor.username && !confirmed.tutor_confirmed) || (jwt.username==props.session.student.username && !confirmed.student_confirmed)) && <a className=\"delete-link\" onClick={confirmSession}>Confirm</a>\n              }\n            </Card.Text>\n            <Link to={{\n              pathname: `/user/sessions/${props.session._id.$oid}/edit`,\n              state: {\n\n                session: props.session\n              }\n            }}>Edit\n        </Link>\n          </Card.Body>\n        </Card>\n      </div>) : (\n        <tr>\n          <td>{props.session.student.username}</td>\n          <td>{props.session.tutor.username}</td>\n          <td>{props.session.subject}</td>\n          <td>{parseDate(props.session.date.$date)}</td>\n          <td>{parseTime(props.session.end_time.$date)}</td>\n        </tr>)\n  )\n\n}\n\nexport default SessionListing;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SignUpForm.js",["206","207","208","209","210","211","212","213"],"import { React, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap'\nimport DayPicker, { DateUtils } from \"react-day-picker\";\nimport axios from 'axios'\n\nconst SignUpForm = () => {\n\t//Profile pictures not working, must fix \n  const [dates, setDates] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [role, setRole] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [bestSubjects, setBestSubjects] = useState([]);\n  const [problemSubjects, setProblemSubjects] = useState([]);\n\n  const requiredFields = {\"role\":\"Role required. \", \"full_name\": \"Full Name required. \", \"username\": \"Username required. \", \"password\":\"Password required. \", \"us_phone_number\": \"Phone required. \"}\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    errorChecker(e);\n\twindow.scrollTo(0, 0)\n    if (errors.length === 0) {\n      const email = e.target.email.value;\n      const full_name = e.target.full_name.value;\n      const username = e.target.username.value;\n      const password = e.target.password.value;\n      const biography = e.target.biography ? e.target.biography.value : '';\n      const us_phone_number = e.target.us_phone_number.value;\n      const meeting_link = e.target.meeting_link ? e.target.meeting_link.value : ' ';\n      const profile_picture = e.target.profile_picture.files[0];\n\t  console.log(e.target)\n\t  console.log(profile_picture)\n      const bodyFormData = new FormData();\n\n      bodyFormData.append(\"email\", email);\n      bodyFormData.append('full_name', full_name);\n      bodyFormData.append('password', password);\n      bodyFormData.append('us_phone_number', us_phone_number);\n      bodyFormData.append('profile_picture', profile_picture);\n      bodyFormData.append('biography', biography)\n      bodyFormData.append('username', username);\n      bodyFormData.append('availability', dates.map((date) => {\n        console.log(date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear())\n        return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n      }));\n\n      if (role.includes(\"tutor\")) {\n        bodyFormData.append('meeting_link', meeting_link);\n        bodyFormData.append('tutor_subjects', bestSubjects);\n      }\n\n      if (role.includes(\"student\")) {\n        bodyFormData.append('problem_subjects', problemSubjects);\n      }\n\n      setSubmitted(true);\n      axios.post('http://127.0.0.1:5000/user/sign_up', bodyFormData)\n        .then(function (response) {\n          console.log(response);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n\n  const updateRole = (e) => {\n    setRole(e.target.value)\n  }\n\n  const errorChecker = (e) => {\n    if (!role && errors.indexOf(\"role\")==-1) {\n      setErrors([...errors, \"role\"])\n    }\n\n    if(!e.target.email.value && errors.indexOf(\"email\")==-1){\n      setErrors([...errors, \"email\"])\n    }\n\n    if(!e.target.full_name.value && errors.indexOf(\"full_name\")==-1){\n      setErrors([...errors, \"full_name\"])\n    }\n\n    if(!e.target.username.value  && errors.indexOf(\"username\")==-1){\n      setErrors([...errors, \"username\"])\n    }\n\n    if(!e.target.us_phone_number.value  && errors.indexOf(\"us_phone_number\")==-1){\n      setErrors([...errors, \"us_phone_number\"])\n    }\n\n\tif(e.target.us_phone_number.value && e.target.email.value && e.target.username.value && e.target.full_name.value && role){\n\t\tsetErrors([])\n\t}\n  }\n  const handleDayClick = (day, { selected }) => {\n    const arr = [...dates];\n    if (selected) {\n      const selectedIndex = arr.findIndex(selectedDay =>\n        DateUtils.isSameDay(selectedDay, day)\n      );\n      arr.splice(selectedIndex, 1);\n      setDates(arr);\n    }\n    else {\n      setDates([...dates, day]);\n    }\n  }\n\n  const conditionalSubjectType = () => {\n    let returnedTypes = [];\n    const tutor = (\n      <div>\n        <Form.Group controlId=\"conditional\">\n          <Form.Group controlId=\"meeting_link\">\n            <Form.Label>*Meeting Link</Form.Label>\n            <Form.Control type=\"text\" />\n          </Form.Group>\n          <Form.Group controlId=\"subjects\">\n            <Form.Label>Best Subjects</Form.Label>\n            {subjects(false)}\n          </Form.Group>\n        </Form.Group>\n      </div>\n    )\n\n    const student =\n      (<Form.Group controlId=\"problem_subjects\">\n        <Form.Label>Problem Subjects</Form.Label>\n        {subjects(true)}\n      </Form.Group>)\n\n    if (role.includes(\"tutor\")) {\n      returnedTypes.push(tutor);\n    }\n\n    if (role.includes(\"student\")) {\n      returnedTypes.push(student);\n    }\n\n    return returnedTypes;\n\n  }\n\n  const conditionalCheck = (problem) => {\n    let onCheckChange;\n    if (!problem) {\n      onCheckChange = (e) => {\n        if (bestSubjects.includes(e.target.value)) {\n          setBestSubjects(bestSubjects.filter(element => element != e.target.value));\n          console.log(bestSubjects);\n        }\n        else {\n          setBestSubjects([...bestSubjects, e.target.value])\n          console.log(bestSubjects);\n        }\n\n      }\n    }\n    else {\n      onCheckChange = (e) => {\n        if (problemSubjects.includes(e.target.value)) {\n          setProblemSubjects(problemSubjects.filter(element => element != e.target.value));\n          console.log(problemSubjects);\n        }\n        else {\n          setProblemSubjects([...problemSubjects, e.target.value]);\n          console.log(problemSubjects);\n        }\n      }\n    }\n\n    return onCheckChange;\n  }\n\n  const subjects = (problem) => {\n    const subjects = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Computer Science']\n    let id = problem ? \"problem\" : \"best\"\n    return (\n      <div>\n        <Form.Group controlId={`math ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Math\" label=\"Math\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`physics ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Physics\" label=\"Physics\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`chemistry ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Chemistry\" label=\"Chemistry\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`biology ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Biology\" label=\"Biology\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`english ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"English\" label=\"English\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`history ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"History\" label=\"History\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`compsci ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Computer Science\" label=\"Computer Science\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n      </div>\n    )\n  }\n\n  const errorList = errors.map((errorCode)=>(\n\t<p className=\"form-error\" key={errorCode}>{requiredFields[errorCode]}</p>)\n\t)\n  return (\n    <div className=\"form-comp\">\n      <h1>Sign Up</h1>\n\n      {errorList}\n      {submitted && errors.length === 0 ? <span className=\"form-text\">Please check your email to finish activating your account.</span> : null}\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control name=\"email\" type=\"email\" required/>\n        </Form.Group>\n\n        <Form.Group controlId=\"full_name\">\n          <Form.Label>Full Name</Form.Label>\n          <Form.Control name=\"full_name\" type=\"text\" required/>\n        </Form.Group>\n\n        <Form.Group controlId=\"username\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control name=\"username\" type=\"text\" required/>\n        </Form.Group>\n\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control name=\"password\" type=\"password\" required/>\n        </Form.Group>\n\n        <Form.Group controlId=\"us_phone_number\">\n          <Form.Label>Phone Number</Form.Label>\n          <Form.Control name=\"us_phone_number\" type=\"tel\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" required />\n        </Form.Group>\n\n        <Form.Group controlId=\"biography\">\n          <Form.Label>Tell us about yourself!</Form.Label>\n          <Form.Control name=\"biography\" as=\"textarea\" rows={3} />\n        </Form.Group>\n\n        {conditionalSubjectType()}\n        <Form.Group controlId=\"role\">\n          <Form.Check\n            inline\n            value=\"tutor\"\n            name=\"role\"\n            checked={role === \"tutor\"}\n            label=\"Tutor\"\n            type=\"radio\"\n            id=\"tutor\"\n            onClick={updateRole}\n\t\t\trequired\n          />\n          <Form.Check\n            inline\n            value=\"student\"\n            name=\"role\"\n            checked={role === \"student\"}\n            label=\"Student\"\n            type=\"radio\"\n            id=\"student\"\n            onClick={updateRole}\n\t\t\trequired\n          />\n          <Form.Check\n            inline\n            value=\"student,tutor\"\n            name=\"role\"\n            checked={role === \"student,tutor\"}\n            label=\"Both\"\n            type=\"radio\"\n            id=\"both\"\n            onClick={updateRole}\n\t\t\trequired\n          />\n        </Form.Group>\n\n        <Form.Label>Profile Picture</Form.Label>\n        <input accept=\".jpg,.png,.jpeg\" type=\"file\" name=\"profile_picture\" />\n\n        <Form.Group controlId=\"availability\">\n          <Form.Label>*Availability</Form.Label>\n\n          <DayPicker\n            className=\"calendar\"\n            disabledDays={{ before: new Date() }}\n            format=\"MM/DD/YYYY\"\n            name=\"availability\"\n            onDayClick={handleDayClick}\n            selectedDays={dates}\n          />\n\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n\n      </Form>\n\n    </div>);\n}\n\nexport default SignUpForm;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/AdminPortal.js",["214","215","216","217"],"\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport {\n  Link\n} from \"react-router-dom\";\nimport ReactPaginate from 'react-paginate'\nimport { Form, Table, Row} from 'react-bootstrap'\nimport UserTableListing from './UserTableListing'\nimport UserSessions from './UserSessions'\nimport Filters from './Filters'\n//ensure that start and end date are after each other in edit/sess create\n//allow deletion of profiles\n//auto delete if not 'is active' after a certain time period?\n//How to verify session happened? \n\nconst AdminPortal = () => {\n  //What if only a few head admins could make admin accs, only thru the admin portal?\n  const [users, setUsers] = useState({\n    userList: [],\n    displayed: [],\n    filtered: [],\n  });\n\n  const [offset, setOffset] = useState(0);\n  const perPage = 10;\n  let pageCount = Math.ceil(users.filtered.length) / perPage;\n  const [mode, setMode] = useState(\"user\")\n\n  const handlePageClick = (e) => {\n    let selected = e.selected;\n    let offset = Math.ceil(selected * perPage);\n    setOffset(offset);\n  };\n\n  const setModeFilter = (e) => {\n    setMode(e.target.value);\n  }\n\n  useEffect(() => {\n    setUsers({ ...users, displayed: offset + perPage >= users.filtered.length ? users.filtered.slice(offset, users.filtered.length) : users.filtered.slice(offset, offset + perPage) })\n  }, [offset])\n\n  useEffect(() => {\n    axios.get('http://127.0.0.1:5000/user')\n      .then((res) => {\n        //Turn this whole user thing into a hook, consolidate it and Dashboard\n        setUsers({ userList: res.data, filtered: res.data, displayed: res.data });\n        return res.data;\n      })\n  }, [])\n\n\n\n  //,aybe go back thru checkboxes and automate their creation with an array of sorts, so you don't have to copy-paste another one every time a new subject is added\n  return (<div>\n    <h1>Admin Portal</h1>\n    <Link to=\"/admin/subjects\" >Subjects</Link>\n    <Row>\n      <Form.Group className=\"radios\">\n        <Form.Check\n          inline\n          value=\"user\"\n          name=\"setModeFilter\"\n          label=\"User View\"\n          type=\"radio\"\n          id=\"mode\"\n          checked={(mode == \"user\")}\n          onClick={setModeFilter}\n        />\n        <Form.Check\n          inline\n          value=\"session\"\n          name=\"setModeFilter\"\n          label=\"Session View\"\n          type=\"radio\"\n          id=\"mode\"\n          onClick={setModeFilter}\n        />\n      </Form.Group>\n    </Row>\n    {mode == \"user\" && <Filters users={users} setUsers={setUsers} offset={offset} pageCount={pageCount} perPage={perPage} mode={mode} setMode={setMode} />}\n    {mode == \"user\" ? users.displayed.length === 0 ? <span className=\"flavor-text greyed_out\">No Matching Users</span> :\n      <div>\n        <Table responsive striped bordered hover variant=\"dark\">\n          <thead>\n            <th>Full Name</th>\n            <th>Username</th>\n            <th>Email</th>\n            <th>Phone</th>\n            <th>Roles</th>\n            <th>Tutor's Subjects</th>\n            <th>Problem Subjects</th>\n            <th>Hours</th>\n          </thead>\n          <tbody>\n            {users.displayed.map((user) => {\n              return (\n                <UserTableListing\n                  key={user._id.$oid}\n                  full_name={user.full_name}\n                  username={user.username}\n                  email={user.email}\n                  us_phone_number={user.us_phone_number}\n                  roles={user.roles}\n                  tutor_subjects={user.tutor_subjects}\n                  problem_subjects={user.problem_subjects}\n                />\n              )\n            })}\n          </tbody>\n        </Table>\n        <ReactPaginate\n          pageCount={pageCount}\n          pageRangeDisplayed={5}\n          marginPagesDisplayed={5}\n          onPageChange={handlePageClick}\n          containerClassName={'pagination'}\n          subContainerClassName={'pages pagination'}\n          activeClassName={'active'}\n          previousLabel={'previous'}\n          nextLabel={'next'}\n          breakLabel={'...'}\n        />\n\n\n      </div> :\n      <UserSessions perPage={5} />}\n  </div>\n\n  )\n}\n\n\n\n\n\nexport default AdminPortal;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Errors.js",["218"],"import { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Errors = (props) => {\nconsole.log(props.error)\n    const determineRendered = () => {\n        switch (props.error) {\n            case 401:\n                return (\n                <div>\n                    <h1>401</h1>\n                    <h2>You do not have access to this page</h2>\n                    <Link to=\"/\">Home</Link>\n                </div>);\n            case 404: \n                return (\n                <div>\n                    <h1>404</h1>\n                    <h2>The page was not found.</h2>\n                    <Link to=\"/\">Home</Link>\n                </div>)\n        }\n    }\n    return (\n        <div>\n            {determineRendered()}\n        </div>\n    )\n}\n\n\nexport default Errors;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserTableListing.js",["219","220"],"import { useState, useEffect } from 'react'\nimport { axios_instance } from '../index'\nimport {subjects} from './Subjects'\nimport {Link} from 'react-router-dom';\nconst UserTableListing = (props) => {\n  const [hours, setHours] = useState([]);\n  const getHours = async (username) => {\n    const res = await axios_instance.get(`/user/${username}/tutoring_history?hours=true`)\n    return res.data;\n  }\n\n  useEffect(() => {\n    if (props.username) {\n      getHours(props.username)\n        .then((res) => {\n          const hoursFormatted = [];\n          for(const subject in res){\n            hoursFormatted.push(<div>{subject} : {res[subject]}</div>)\n          }\n          return hoursFormatted;\n        })\n        .then((res)=>{\n          setHours(res);\n        })\n    }\n    else {\n      console.log(\"NO USER FOUND\")\n    }\n  }, [])\n\n  return (\n \n      <tr className=\"userListing\">\n        <td>{props.full_name}</td>\n        <td><Link to={`/user/${props.username}`}>{props.username}</Link></td>\n        <td>{props.email}</td>\n        <td>{props.us_phone_number}</td>\n        <td>{props.roles}</td>\n        <td>{props.tutor_subjects && props.tutor_subjects.length !== 0 ? props.tutor_subjects.join(\", \") : \"N/A\"}</td>\n        <td>{props.tutor_subjects && props.problem_subjects.length !== 0 ? props.problem_subjects : \"N/A\"}</td>\n        <td>{hours}</td>\n      </tr>\n\n  );\n}\n\n\nexport default UserTableListing;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/utility.js",["221"],"import jwt from 'jsonwebtoken'\n\nconst parseDate = (dateInput) => {\n  const date = new Date(dateInput);\n  return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear() + \" \" + parseTime(dateInput);\n}\n\nconst parseTime = (dateInput) => {\n  const date = new Date(dateInput);\n  const AMPM = date.getHours() >= 12 ? \"PM\" : \"AM\";\n  return ((date.getHours() > 12 ? date.getHours() - 12 : date.getHours()) + \":\" + date.getMinutes() + \" \" + AMPM);\n}\n\nconst subjectList = [];\n//Later to be stuffed into DB\n\nconst verifyJWT = () => {\n  let user = localStorage.getItem('token');\n  let decoded;\n  if (user) {\n    try {\n      decoded = jwt.verify(user, '/NJIBYUGHBYUHIKNBJBYBTGYIUJNBGFB/')\n    }\n    catch (e) {\n      console.log(e);\n      return null;\n    }\n    return decoded;\n  }\n  \n}\n\nexport {parseDate, parseTime,verifyJWT}\n","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Filters.js",["222","223","224","225","226","227","228","229","230"],"import { useState, useEffect } from 'react';\nimport { Form, FormControl, Collapse, Button, Dropdown, Col, Row, Pagination } from 'react-bootstrap'\nimport jwt from 'jsonwebtoken';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport Subjects from '../Components/Subjects'\nconst Filters = (props) => {\n    const [open, setOpen] = useState(false);\n\n    const [filter, setFilter] = useState({\n        nameFilter: '',\n        emailFilter: '',\n        usernameFilter: '',\n        phoneFilter: '',\n        roleFilter: '',\n        subjectsFilter: [],\n        availabilityFilter: null\n    })\n    //This will replace the long string of use states later\n    const [nameFilter, setNameFilter] = useState('');\n    const [emailFilter, setEmailFilter] = useState('');\n    const [usernameFilter, setUsernameFilter] = useState('');\n    const [phoneFilter, setPhoneFilter] = useState('');\n    const [role, setRole] = useState('');\n    const [subjectsFilter, setSubjectsFilter] = useState([]);\n    const [availabilityFilter, setAvailabilityFilter] = useState(null);\n    //USER availability not defined\n    // not working subjects filter\n    //\n\n    const inputChange = (e) => {\n        hookUpdateFunctions[e.target.name](e.target.value)\n    }\n\n    let userToken = localStorage.getItem('token');\n    let decoded;\n    if (userToken) {\n        try {\n            decoded = jwt.verify(userToken, '/NJIBYUGHBYUHIKNBJBYBTGYIUJNBGFB/')\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n\n    const handleDayClick = (day, { selected }) => {\n        const selectedDay = selected ? undefined : day;\n        setAvailabilityFilter(selectedDay);\n    }\n\n    const availabilityCheck = (user) => {\n        let foundSameDate = false;\n        let i = 0;\n\n        while (!foundSameDate && i < user.availability.length) {\n            const date = new Date(user.availability[i++].$date);\n            foundSameDate = availabilityFilter.getDate() == date.getDate()\n                && availabilityFilter.getFullYear() == date.getFullYear()\n                && availabilityFilter.getMonth() == date.getMonth();\n        }\n\n        return foundSameDate;\n    }\n\n    useEffect(() => {\n        const filtered = props.users.userList.filter((user) => {\n\n            let allChecks = true;\n\n            allChecks = nameFilter ? (user.full_name.toLowerCase().includes(nameFilter.toLowerCase()) ? allChecks : false) : allChecks;\n\n            allChecks = emailFilter ? (user.email.toLowerCase().includes(emailFilter.toLowerCase()) ? allChecks : false) : allChecks;\n\n            allChecks = phoneFilter ? (user.us_phone_number.startsWith(phoneFilter) ? allChecks : false) : allChecks;\n\n            allChecks = subjectsFilter.length !== 0 ? ((user.tutor_subjects &&\n                subjectsFilter.every((element) => user.tutor_subjects.includes(element)))\n                || (user.problem_subjects && subjectsFilter.every((element) => user.problem_subjects.includes(element))) ? allChecks : false) : allChecks;\n\n            allChecks = usernameFilter ? (user.username.toLowerCase().includes(usernameFilter.toLowerCase()) ? allChecks : false) : allChecks;\n\n            allChecks = role ? (user.roles.includes(role) ? allChecks : false) : allChecks;\n\n            allChecks = availabilityFilter && user.availability ? (availabilityCheck(user) ? allChecks : false) : allChecks;\n            return allChecks;\n        })\n\n\n        props.setUsers({ ...props.users, filtered: filtered, displayed: (props.offset + props.perPage >= filtered.length ? filtered.slice(props.offset, filtered.length) : filtered.slice(props.offset, props.offset + props.perPage)) })\n\n    }, [nameFilter, emailFilter, usernameFilter, phoneFilter, role, subjectsFilter, availabilityFilter])\n\n\n    const setCheckFilter = (value) => {\n        if (subjectsFilter.includes(value)) {\n            setSubjectsFilter(subjectsFilter.filter(element => element != value));\n        }\n        else {\n            setSubjectsFilter([...subjectsFilter, value])\n        }\n    }\n\n    const setRoleFilter = (e) => {\n        if (e.target.value === role) {\n            e.target.checked = false;\n            setRole(\"\");\n        }\n        else {\n            setRole(e.target.value);\n        }\n    }\n\n    const hookUpdateFunctions = {\n        \"setNameFilter\": setNameFilter,\n        \"setEmailFilter\": setEmailFilter,\n        \"setUsernameFilter\": setUsernameFilter,\n        \"setPhoneFilter\": setPhoneFilter,\n        \"setRoleFilter\": setRoleFilter,\n        \"setSubjectsFilter\": setCheckFilter,\n    }\n    return (\n        <div className=\"filtering\">\n            <Button\n\t\t\t\tid=\"open-filters\"\n                onClick={() => setOpen(!open)}\n                aria-controls=\"filter-form\"\n                aria-expanded={open}\n            >\n                Filter\n      </Button>\n            <Collapse in={open}>\n                <div id=\"filter-form\" >\n                    <Form className=\"form-comp\">\n                        <Row>\n                            <Col>\n                                <Form.Group>\n                                    <Form.Label>Name</Form.Label>\n                                    <FormControl className=\"search-input\" type=\"text\" name=\"setNameFilter\" onChange={inputChange} />\n                                    {decoded.rls.includes('admin') && (<div>\n                                        <Form.Label>Email</Form.Label>\n                                        <FormControl className=\"search-input\" type=\"text\" name=\"setEmailFilter\" onChange={inputChange} />\n                                    </div>)}\n                                </Form.Group>\n                            </Col>\n\n                            <Col>\n                                <Form.Label>Username</Form.Label>\n                                <FormControl className=\"search-input\" type=\"text\" name=\"setUsernameFilter\" onChange={inputChange} />\n\n                                {decoded.rls.includes('admin') && (<div>\n                                    <Form.Label>Phone # (Stored in format xxx-xxx-xxxx)</Form.Label>\n                                    <FormControl className=\"search-input\" type=\"text\" name=\"setPhoneFilter\" onChange={inputChange} />\n                                </div>)}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Subjects checkboxes={true} name=\"setSubjectsFilter\" onCheck={inputChange} />\n                        </Row>\n                        <Row>\n\n                            <DayPickerInput\n                                className=\"calendar\"\n                                format=\"M/D/YYYY\"\n                                name=\"setStartDateFilter\"\n                                id=\"date\"\n                                onDayChange={handleDayClick}\n                                value={availabilityFilter}\n                            />\n                        </Row>\n                        <Row>\n                            <Form.Group className=\"radios\" controlId=\"role\">\n                                <Form.Check\n                                    inline\n                                    value=\"tutor\"\n                                    name=\"setRoleFilter\"\n                                    label=\"Tutor\"\n                                    type=\"radio\"\n                                    id=\"tutor\"\n                                    onClick={setRoleFilter}\n                                />\n                                <Form.Check\n                                    inline\n                                    value=\"student\"\n                                    name=\"setRoleFilter\"\n                                    label=\"Student\"\n                                    type=\"radio\"\n                                    id=\"student\"\n                                    onClick={setRoleFilter}\n                                />\n                                <Form.Check\n                                    inline\n                                    value=\"student,tutor\"\n                                    name=\"setRoleFilter\"\n                                    label=\"Both\"\n                                    type=\"radio\"\n                                    id=\"both\"\n                                    onClick={setRoleFilter}\n                                />\n                            </Form.Group>\n                        </Row>\n                    </Form>\n                </div>\n            </Collapse>\n        </div>)\n}\n\n\nexport default Filters;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SessionFilters.js",["231","232","233","234","235","236","237"],"import { useState, useEffect } from 'react';\nimport { Form, FormControl, Dropdown, Col, Row, Pagination } from 'react-bootstrap'\nimport TimePicker from 'react-time-picker';\nimport DayPicker from 'react-day-picker';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport Subjects from './Subjects'\n\nconst SessionFilters = (props) => {\n    const setTutorFilter = (e) => {\n        props.setFilters({ ...props.filters, tutorFilter: e.target.value });\n    }\n\n    const setStudentFilter = (e) => {\n        props.setFilters({ ...props.filters, studentFilter: e.target.value });\n    }\n\n    const handleDayClick = (day, { selected }) => {\n        const selectedDay = selected ? undefined : day;\n        props.setFilters({ ...props.filters, startDateFilter: selectedDay });\n    }\n\n    const setStartTimeFilter = (time) => {\n        props.setFilters({ ...props.filters, startTimeFilter: time });\n    }\n\n    const setEndTimeFilter = (time) => {\n        props.setFilters({ ...props.filters, endTimeFilter: time });\n    }\n\n    const setSubjectFilter = (eventKey) => {\n        props.setFilters({ ...props.filters, sessionSubjectFilter: eventKey })\n    }\n\n    return (\n        <Form className=\"form-comp\">\n            <Form.Group>\n                <Form.Label>Tutor Filter</Form.Label>\n                <FormControl className=\"search-input short\" type=\"text\" name=\"setTutorFilter\" onChange={setTutorFilter} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Student Filter</Form.Label>\n                <FormControl className=\"search-input short\" type=\"text\" name=\"setDateFilter\" onChange={setStudentFilter} />\n            </Form.Group>\n            <div className=\"flex-form\">\n                <Form.Group>\n                    <Form.Label>Date Filter</Form.Label>\n                    <DayPickerInput\n                        className=\"calendar\"\n                        format=\"M/D/YYYY\"\n                        name=\"setStartDateFilter\"\n                        id=\"date\"\n                        onDayChange={handleDayClick}\n                        value={props.filters.startDateFilter}\n                    />\n                </Form.Group>\n\n                {props.filters.startDateFilter &&\n                    (\n                        <div >\n                            <Form.Group>\n                                <Form.Label>Start Time Filter</Form.Label>\n                                <TimePicker\n                                    name=\"setTimePicker\"\n                                    id=\"end_time\"\n                                    onChange={setStartTimeFilter}\n                                    value={props.filters.startTimeFilter}\n                                    disableClock={true}\n                                />\n                                <Form.Label>End Time Filter</Form.Label>\n                                <TimePicker\n                                    name=\"setTimePicker\"\n                                    id=\"end_time\"\n                                    minTime={props.filters.startTimeFilter}\n                                    value={props.filters.endTimeFilter}\n                                    onChange={setEndTimeFilter}\n                                    disableClock={true}\n                                />\n                            </Form.Group>\n                        </div>\n                    )\n                }\n                <Subjects onSelect={setSubjectFilter} subject={props.filters.sessionSubjectFilter}/>\n            </div>\n        </Form>\n    )\n\n}\n\nexport default SessionFilters;",["238","239"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Subjects.js",["240","241"],"import { Dropdown, Form } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\"\nimport { subjectList } from \"../utility\";\nimport { axios_instance } from '../index'\n//change to get thessse from db later\n\nconst Subjects = (props) => {\n  const [subjects, setSubjects] = useState([])\n\n  useEffect(() => {\n    axios_instance.get(\"http://127.0.0.1:5000/subjects\")\n      .then((res) => {\n        setSubjects(res.data);\n      })\n  }, [])\n\n  const onDropdownSelect = (eventKey) => {\n    if (eventKey == props.subject) {\n      props.onSelect('')\n    }\n    else {\n      props.onSelect(eventKey)\n    }\n  }\n\n\n\n  return (\n    <div className=\"center\">\n      { props.checkboxes ? (\n        <div className=\"checkboxes subjects\">\n         { subjects.map((element) =>  <Form.Check type=\"checkbox\" key={element.subject}value={element.subject} label={element.subject} name=\"setSubjectsFilter\" onChange={props.onCheck} />)} \n        </div>\n      ) : (<Dropdown onSelect={onDropdownSelect}>\n        <Dropdown.Toggle variant=\"success\" className=\"subject\">\n          <span id=\"dropdown-subject\"> {props.subject ? props.subject : \"Subject\"}</span>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {subjects.map(element => (<Dropdown.Item eventKey={element.subject}><span>{element.subject}</span></Dropdown.Item>),)}\n        </Dropdown.Menu>\n      </Dropdown>)\n      }\n    </div>\n  )\n}\n\nexport default Subjects;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Chat.js",["242","243","244","245","246","247","248","249","250","251","252"],"import React, { useEffect, useContext, useCallback, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { axios_instance } from '..';\nimport Select from 'react-select';\nimport jwt_decode from 'jwt-decode'\nimport ReactLoading from 'react-loading';\nimport ReactPaginate from 'react-paginate';\nimport { parseDate, verifyJWT } from '../utility'\nimport io from 'socket.io-client'\nimport { SocketContext } from '../Hooks/socketContext'\n\nconst Chat = () => {\n\tconst jwt = verifyJWT();\n\n\tconst socket = useContext(SocketContext);\n\tconst { username } = useParams();\n\tconst [messages, set_messages] = useState({\n\t\toffset: 0,\n\t\trecipient: undefined,\n\t\tdisplayed: [],\n\t\tmessages: []\n\t});\n\n\tconst [user_list, set_user_list] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\tconst perPage = 30;\n\tlet pageCount = Math.ceil(messages.messages.length) / perPage;\n\n\tconst handleReceiveMessage = useCallback((msg) => {\n\t\tconst id = jwt.id.replace(/['\"]+/g, '');\n\t\tif (id == msg.recipient.$oid) {\n\t\t\tset_messages((previous_messages) => {\n\t\t\t\tconst newArr = [...previous_messages.messages, msg]\n\t\t\t\treturn {\n\t\t\t\t\toffset: previous_messages.offset,\n\t\t\t\t\trecipient: previous_messages.recipient,\n\t\t\t\t\tdisplayed: (previous_messages.offset + perPage >= newArr.length ? newArr.slice(previous_messages.offset, newArr.length) : newArr.slice(previous_messages.offset, previous_messages.offset + perPage)),\n\t\t\t\t\tmessages: newArr\n\t\t\t\t}\n\t\t\t})\n\n\t\t}\n\t}, [])\n\n\n\n\n\tuseEffect(() => {\n\t\tset_messages({\n\t\t\t...messages,\n\t\t\tdisplayed: (messages.offset + perPage >= messages.messages.length ? messages.messages.slice(messages.offset, messages.messages.length) : messages.messages.slice(messages.offset, messages.offset + perPage))\n\t\t})\n\t}, [messages.offset])\n\n\n\tuseEffect(() => {\n\t\tif (jwt.rls.includes('student') && jwt.rls.includes('tutor')) {\n\t\t\taxios_instance.get('http://127.0.0.1:5000/user')\n\t\t\t\t.then(function (response) {\n\t\t\t\t\treturn response.data.filter(user => user.username != username)\n\t\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tset_user_list([...user_list, ...res])\n\t\t\t\t})\n\t\t\t\t.catch(function (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t}\n\n\t\telse if (jwt.rls.includes('tutor')) {\n\t\t\taxios_instance.get('http://127.0.0.1:5000/user/students')\n\t\t\t\t.then(function (response) {\n\t\t\t\t\treturn response.data.filter(user => user.username != username)\n\t\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tset_user_list([...user_list, ...res])\n\t\t\t\t})\n\t\t\t\t.catch(function (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t}\n\n\t\telse if (jwt.rls.includes('student')) {\n\t\t\taxios_instance.get('http://127.0.0.1:5000/user/tutors')\n\t\t\t\t.then(function (response) {\n\t\t\t\t\treturn response.data.filter(user => user.username != username)\n\t\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tset_user_list([...user_list, ...res])\n\t\t\t\t})\n\t\t\t\t.catch(function (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t}\n\t\tsocket.on(\"msg\", handleReceiveMessage)\n\t\treturn () => {\n\t\t\tsocket.disconnect();\n\t\t};\n\t}, [])\n\n\tuseEffect(() => {\n\t\t//Getting called faultily after a message is recieved\n\t\tif (messages.recipient && messages.recipient.username != undefined) {\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tresolve(setLoading(true))\n\t\t\t})\n\t\t\t\t.then\n\t\t\t\t(() => axios_instance.get(`http://127.0.0.1:5000/user/${username}/chat/${messages.recipient._id.$oid}`))\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.data) {\n\t\t\t\t\t\tset_messages({...messages, offset: 0, displayed: perPage >= res.data.length ? res.data.slice(0, res.data.length) : res.data.slice(0, perPage), messages: [...res.data] });\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t})\n\t\t}\n\t}, [messages.recipient])\n\n\n\tconst handleSubmit = (e) => {\n\n\t\te.preventDefault();\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t}\n\n\t\tconst message = {\n\t\t\trecipient: messages.recipient._id.$oid,\n\t\t\tbody: e.target.message.value,\n\t\t\tsender: jwt_decode(localStorage.getItem(\"token\")).id\n\t\t}\n\n\t\taxios_instance.post(`http://127.0.0.1:5000/user/${username}/chat/${messages.recipient._id.$oid}`, message, config)\n\t\t\t.then((res) => {\n\t\t\t\tconst newArr = [...messages.messages, res.data]\n\t\t\t\tset_messages({\n\t\t\t\t\t...messages,\n\t\t\t\t\tdisplayed: (messages.offset + perPage >= newArr.length ? newArr.slice(messages.offset, newArr.length) : newArr.slice(messages.offset, messages.offset + perPage)),\n\t\t\t\t\tmessages: newArr\n\t\t\t\t});\n\n\n\t\t\t\treturn res.data;\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tsocket.emit(\"msg\", res)\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\n\t}\n\n\tconst handleSelect = (selected) => {\n\t\tset_messages({ ...messages, recipient: selected })\n\t}\n\n\tconst handlePageClick = (e) => {\n\t\tlet selected = e.selected;\n\t\tlet offset = Math.ceil(selected * perPage);\n\t\tset_messages({...messages, offset: offset});\n\t};\n\n\tconst message_list = messages.displayed.map((message) => {\n\n\t\tlet message_class =  messages.recipient._id.$oid == message.sender.$oid ? \"recieved\" : \"sent\";\n\n\t\tconst date = new Date(message.timestamp.$date);\n\n\t\tconst timestamp = parseDate(date)\n\n\t\treturn (\n\t\t\t<div key={message._id.$oid} className={`message ${message_class}`}>\n\t\t\t\t<span className=\"message_text\">{message.body}</span>\n\t\t\t\t<span className=\"message_time\">{timestamp}</span>\n\n\t\t\t</div>)\n\t})\n\n\n\treturn (\n\t\t<Form onSubmit={handleSubmit} className=\"form-comp\">\n\t\t\t{messages.recipient ? <div>\n\t\t\t\t<h2 className=\"username\">{messages.recipient.username}</h2>\n\t\t\t\t{loading && <ReactLoading type={\"spin\"} color={\"white\"} height={'10%'} width={'10%'} className=\"loading_spinner\" />}\n\t\t\t\t<div >{message_list.length !== 0 ?\n\t\t\t\t\t<div className=\"message_list\">\n\t\t\t\t\t\t{message_list}\n\t\t\t\t\t\t< ReactPaginate\n\t\t\t\t\t\t\tpageCount={pageCount}\n\t\t\t\t\t\t\tpageRangeDisplayed={5}\n\t\t\t\t\t\t\tmarginPagesDisplayed={5}\n\t\t\t\t\t\t\tonPageChange={handlePageClick}\n\t\t\t\t\t\t\tcontainerClassName={'pagination'}\n\t\t\t\t\t\t\tsubContainerClassName={'pages pagination'}\n\t\t\t\t\t\t\tactiveClassName={'active'}\n\t\t\t\t\t\t\tpreviousLabel={'Previous'}\n\t\t\t\t\t\t\tnextLabel={'Next'}\n\t\t\t\t\t\t\tbreakLabel={'...'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div> :\n\t\t\t\t\t<span class=\"flavor-text\">Start a conversation</span>}</div>\n\t\t\t</div>\n\t\t\t\t: <div> <h1>Chat</h1><span class=\"flavor-text\">Select someone to chat with.</span></div>}\n\n\t\t\t<div className=\"message-form-input\">\n\t\t\t\t<div>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tmenuPortalTarget={document.querySelector('body')}\n\t\t\t\t\t\tmaxMenuHeight={220}\n\t\t\t\t\t\tclassNamePrefix=\"react-select\"\n\t\t\t\t\t\tclassName=\"select center\"\n\t\t\t\t\t\tonChange={handleSelect}\n\t\t\t\t\t\toptions={user_list}\n\t\t\t\t\t\tgetOptionLabel={(option) => option.username}\n\t\t\t\t\t\tgetOptionValue={(option) => option._id}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{messages.recipient && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Form.Group controlId=\"message\">\n\t\t\t\t\t\t\t<Form.Control type=\"text\" placeholder=\"Message\" />\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Button type=\"submit\">Send</Button>\n\t\t\t\t\t</div>)}\n\t\t\t</div>\n\t\t</Form>\n\t)\n}\n\nexport default Chat;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/CreateSubject.js",["253"],"import React, { useState, useEffect } from 'react';\nimport { Form, FormControl, Button } from 'react-bootstrap'\nimport { axios_instance } from '../index'\n\nconst CreateSubject = () => {\n    const [subjects, setSubjects] = useState([]);\n    const [errors, setErrors] = useState([]);\n\n    const createSubject = (e) => {\n        e.preventDefault()\n        const config = {\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n        axios_instance.post(\"http://127.0.0.1:5000/subjects/new\", { 'subject': e.target.subject.value }, config)\n            .then((res) => {\n                e.target.subject.value = \"\"\n                setErrors('')\n                setSubjects([...subjects, res.data])\n            })\n            .catch((err) => {\n                setErrors(\"An error occurred processing your request.\")\n            })\n    }\n\n    const deleteSubject = (id) => {\n        axios_instance.post(`http://127.0.0.1:5000/subjects/delete/${id}`)\n        .then(()=>{\n            const newSubjects = subjects.filter((subject)=>subject._id.$oid !== id);\n            setSubjects(newSubjects);\n        })\n        .catch((err)=>{\n            console.log(err)\n            setErrors('Error occurred while deleting')\n        })\n    }\n    useEffect(() => {\n        axios_instance.get(\"http://127.0.0.1:5000/subjects\")\n            .then((res) => {\n                setSubjects(res.data);\n            })\n    }, [])\n\n    return (\n        <div>\n            <h1>Subjects</h1>\n            <h3>Create Subject</h3>\n            {errors}\n            <Form className=\"form-comp\" onSubmit={createSubject}>\n                <Form.Label>New Subject</Form.Label>\n                <FormControl type=\"text\" name=\"subject\" />\n                <Button variant=\"primary\" type=\"submit\">Submit</Button>\n            </Form>\n\n            <h3>Current Subjects</h3>\n            <div className=\"subjects\">\n                {subjects.map((element) => {\n\n                    return (<div className=\"subject\" key={element._id.$oid}>\n                        <p>{element.subject}</p>\n                        <a className=\"delete-link\" onClick={()=>deleteSubject(element._id.$oid)}>Delete</a>\n                    </div>)\n                }\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default CreateSubject;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/AdminRouter.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Hooks/socketContext.js",[],{"ruleId":"254","severity":1,"message":"255","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":27},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"254","severity":1,"message":"262","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":26},{"ruleId":"254","severity":1,"message":"263","line":1,"column":28,"nodeType":"256","messageId":"257","endLine":1,"endColumn":36},{"ruleId":"254","severity":1,"message":"264","line":15,"column":8,"nodeType":"256","messageId":"257","endLine":15,"endColumn":11},{"ruleId":"254","severity":1,"message":"265","line":20,"column":8,"nodeType":"256","messageId":"257","endLine":20,"endColumn":19},{"ruleId":"266","severity":1,"message":"267","line":55,"column":22,"nodeType":"268","messageId":"269","endLine":55,"endColumn":24},{"ruleId":"270","severity":1,"message":"271","line":55,"column":47,"nodeType":"272","messageId":"273","endLine":55,"endColumn":49},{"ruleId":"266","severity":1,"message":"267","line":55,"column":63,"nodeType":"268","messageId":"269","endLine":55,"endColumn":65},{"ruleId":"270","severity":1,"message":"271","line":63,"column":48,"nodeType":"272","messageId":"273","endLine":63,"endColumn":50},{"ruleId":"254","severity":1,"message":"274","line":22,"column":10,"nodeType":"256","messageId":"257","endLine":22,"endColumn":16},{"ruleId":"254","severity":1,"message":"275","line":22,"column":18,"nodeType":"256","messageId":"257","endLine":22,"endColumn":27},{"ruleId":"270","severity":1,"message":"276","line":29,"column":61,"nodeType":"272","messageId":"273","endLine":29,"endColumn":63},{"ruleId":"270","severity":1,"message":"276","line":43,"column":61,"nodeType":"272","messageId":"273","endLine":43,"endColumn":63},{"ruleId":"277","severity":1,"message":"278","line":52,"column":6,"nodeType":"279","endLine":52,"endColumn":8,"suggestions":"280"},{"ruleId":"270","severity":1,"message":"271","line":95,"column":49,"nodeType":"272","messageId":"273","endLine":95,"endColumn":51},{"ruleId":"277","severity":1,"message":"281","line":57,"column":6,"nodeType":"279","endLine":57,"endColumn":15,"suggestions":"282"},{"ruleId":"266","severity":1,"message":"267","line":61,"column":44,"nodeType":"268","messageId":"269","endLine":61,"endColumn":46},{"ruleId":"266","severity":1,"message":"267","line":61,"column":73,"nodeType":"268","messageId":"269","endLine":61,"endColumn":75},{"ruleId":"270","severity":1,"message":"276","line":64,"column":56,"nodeType":"272","messageId":"273","endLine":64,"endColumn":58},{"ruleId":"270","severity":1,"message":"276","line":80,"column":56,"nodeType":"272","messageId":"273","endLine":80,"endColumn":58},{"ruleId":"270","severity":1,"message":"276","line":95,"column":56,"nodeType":"272","messageId":"273","endLine":95,"endColumn":58},{"ruleId":"277","severity":1,"message":"283","line":107,"column":6,"nodeType":"279","endLine":107,"endColumn":8,"suggestions":"284"},{"ruleId":"270","severity":1,"message":"276","line":162,"column":24,"nodeType":"272","messageId":"273","endLine":162,"endColumn":26},{"ruleId":"254","severity":1,"message":"285","line":6,"column":10,"nodeType":"256","messageId":"257","endLine":6,"endColumn":13},{"ruleId":"254","severity":1,"message":"286","line":6,"column":15,"nodeType":"256","messageId":"257","endLine":6,"endColumn":18},{"ruleId":"254","severity":1,"message":"287","line":6,"column":20,"nodeType":"256","messageId":"257","endLine":6,"endColumn":29},{"ruleId":"254","severity":1,"message":"288","line":9,"column":8,"nodeType":"256","messageId":"257","endLine":9,"endColumn":13},{"ruleId":"277","severity":1,"message":"289","line":44,"column":8,"nodeType":"279","endLine":44,"endColumn":10,"suggestions":"290"},{"ruleId":"291","severity":1,"message":"292","line":56,"column":41,"nodeType":"293","endLine":56,"endColumn":174},{"ruleId":"294","severity":1,"message":"295","line":56,"column":183,"nodeType":"293","endLine":56,"endColumn":277},{"ruleId":"270","severity":1,"message":"276","line":58,"column":30,"nodeType":"272","messageId":"273","endLine":58,"endColumn":32},{"ruleId":"270","severity":1,"message":"271","line":60,"column":31,"nodeType":"272","messageId":"273","endLine":60,"endColumn":33},{"ruleId":"266","severity":1,"message":"267","line":76,"column":22,"nodeType":"268","messageId":"269","endLine":76,"endColumn":24},{"ruleId":"270","severity":1,"message":"271","line":76,"column":34,"nodeType":"272","messageId":"273","endLine":76,"endColumn":36},{"ruleId":"266","severity":1,"message":"267","line":76,"column":50,"nodeType":"268","messageId":"269","endLine":76,"endColumn":52},{"ruleId":"270","severity":1,"message":"271","line":88,"column":44,"nodeType":"272","messageId":"273","endLine":88,"endColumn":46},{"ruleId":"277","severity":1,"message":"296","line":27,"column":6,"nodeType":"279","endLine":27,"endColumn":8,"suggestions":"297"},{"ruleId":"270","severity":1,"message":"271","line":92,"column":24,"nodeType":"272","messageId":"273","endLine":92,"endColumn":26},{"ruleId":"298","severity":1,"message":"299","line":171,"column":11,"nodeType":"293","endLine":171,"endColumn":59},{"ruleId":"254","severity":1,"message":"262","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":26},{"ruleId":"254","severity":1,"message":"300","line":2,"column":24,"nodeType":"256","messageId":"257","endLine":2,"endColumn":32},{"ruleId":"254","severity":1,"message":"301","line":6,"column":8,"nodeType":"256","messageId":"257","endLine":6,"endColumn":14},{"ruleId":"270","severity":1,"message":"271","line":75,"column":49,"nodeType":"272","messageId":"273","endLine":75,"endColumn":51},{"ruleId":"254","severity":1,"message":"302","line":90,"column":9,"nodeType":"256","messageId":"257","endLine":90,"endColumn":21},{"ruleId":"277","severity":1,"message":"303","line":33,"column":8,"nodeType":"279","endLine":33,"endColumn":10,"suggestions":"304"},{"ruleId":"254","severity":1,"message":"262","line":2,"column":27,"nodeType":"256","messageId":"257","endLine":2,"endColumn":36},{"ruleId":"254","severity":1,"message":"305","line":2,"column":10,"nodeType":"256","messageId":"257","endLine":2,"endColumn":19},{"ruleId":"270","severity":1,"message":"271","line":46,"column":68,"nodeType":"272","messageId":"273","endLine":46,"endColumn":70},{"ruleId":"270","severity":1,"message":"271","line":47,"column":62,"nodeType":"272","messageId":"273","endLine":47,"endColumn":64},{"ruleId":"270","severity":1,"message":"271","line":48,"column":59,"nodeType":"272","messageId":"273","endLine":48,"endColumn":61},{"ruleId":"270","severity":1,"message":"271","line":53,"column":70,"nodeType":"272","messageId":"273","endLine":53,"endColumn":72},{"ruleId":"270","severity":1,"message":"271","line":53,"column":126,"nodeType":"272","messageId":"273","endLine":53,"endColumn":128},{"ruleId":"270","severity":1,"message":"271","line":59,"column":68,"nodeType":"272","messageId":"273","endLine":59,"endColumn":70},{"ruleId":"270","severity":1,"message":"271","line":59,"column":125,"nodeType":"272","messageId":"273","endLine":59,"endColumn":127},{"ruleId":"270","severity":1,"message":"271","line":62,"column":86,"nodeType":"272","messageId":"273","endLine":62,"endColumn":88},{"ruleId":"277","severity":1,"message":"306","line":68,"column":8,"nodeType":"279","endLine":68,"endColumn":155,"suggestions":"307"},{"ruleId":"277","severity":1,"message":"308","line":111,"column":8,"nodeType":"279","endLine":111,"endColumn":10,"suggestions":"309"},{"ruleId":"277","severity":1,"message":"310","line":116,"column":8,"nodeType":"279","endLine":116,"endColumn":16,"suggestions":"311"},{"ruleId":"254","severity":1,"message":"312","line":3,"column":16,"nodeType":"256","messageId":"257","endLine":3,"endColumn":22},{"ruleId":"254","severity":1,"message":"313","line":8,"column":9,"nodeType":"256","messageId":"257","endLine":8,"endColumn":13},{"ruleId":"270","severity":1,"message":"271","line":15,"column":18,"nodeType":"272","messageId":"273","endLine":15,"endColumn":20},{"ruleId":"270","severity":1,"message":"271","line":18,"column":25,"nodeType":"272","messageId":"273","endLine":18,"endColumn":27},{"ruleId":"270","severity":1,"message":"271","line":24,"column":20,"nodeType":"272","messageId":"273","endLine":24,"endColumn":22},{"ruleId":"270","severity":1,"message":"271","line":27,"column":25,"nodeType":"272","messageId":"273","endLine":27,"endColumn":27},{"ruleId":"270","severity":1,"message":"271","line":55,"column":31,"nodeType":"272","messageId":"273","endLine":55,"endColumn":33},{"ruleId":"270","severity":1,"message":"271","line":55,"column":109,"nodeType":"272","messageId":"273","endLine":55,"endColumn":111},{"ruleId":"298","severity":1,"message":"299","line":55,"column":179,"nodeType":"293","endLine":55,"endColumn":231},{"ruleId":"270","severity":1,"message":"271","line":71,"column":40,"nodeType":"272","messageId":"273","endLine":71,"endColumn":42},{"ruleId":"270","severity":1,"message":"271","line":75,"column":56,"nodeType":"272","messageId":"273","endLine":75,"endColumn":58},{"ruleId":"270","severity":1,"message":"271","line":79,"column":64,"nodeType":"272","messageId":"273","endLine":79,"endColumn":66},{"ruleId":"270","severity":1,"message":"271","line":83,"column":63,"nodeType":"272","messageId":"273","endLine":83,"endColumn":65},{"ruleId":"270","severity":1,"message":"271","line":87,"column":77,"nodeType":"272","messageId":"273","endLine":87,"endColumn":79},{"ruleId":"270","severity":1,"message":"276","line":149,"column":66,"nodeType":"272","messageId":"273","endLine":149,"endColumn":68},{"ruleId":"270","severity":1,"message":"276","line":162,"column":72,"nodeType":"272","messageId":"273","endLine":162,"endColumn":74},{"ruleId":"254","severity":1,"message":"314","line":176,"column":11,"nodeType":"256","messageId":"257","endLine":176,"endColumn":19},{"ruleId":"277","severity":1,"message":"315","line":42,"column":6,"nodeType":"279","endLine":42,"endColumn":14,"suggestions":"316"},{"ruleId":"270","severity":1,"message":"271","line":68,"column":26,"nodeType":"272","messageId":"273","endLine":68,"endColumn":28},{"ruleId":"270","severity":1,"message":"271","line":82,"column":11,"nodeType":"272","messageId":"273","endLine":82,"endColumn":13},{"ruleId":"270","severity":1,"message":"271","line":83,"column":11,"nodeType":"272","messageId":"273","endLine":83,"endColumn":13},{"ruleId":"317","severity":1,"message":"318","line":7,"column":9,"nodeType":"319","messageId":"320","endLine":22,"endColumn":10},{"ruleId":"254","severity":1,"message":"321","line":3,"column":9,"nodeType":"256","messageId":"257","endLine":3,"endColumn":17},{"ruleId":"277","severity":1,"message":"322","line":29,"column":6,"nodeType":"279","endLine":29,"endColumn":8,"suggestions":"323"},{"ruleId":"254","severity":1,"message":"324","line":14,"column":7,"nodeType":"256","messageId":"257","endLine":14,"endColumn":18},{"ruleId":"254","severity":1,"message":"300","line":2,"column":47,"nodeType":"256","messageId":"257","endLine":2,"endColumn":55},{"ruleId":"254","severity":1,"message":"325","line":2,"column":67,"nodeType":"256","messageId":"257","endLine":2,"endColumn":77},{"ruleId":"254","severity":1,"message":"326","line":9,"column":12,"nodeType":"256","messageId":"257","endLine":9,"endColumn":18},{"ruleId":"254","severity":1,"message":"327","line":9,"column":20,"nodeType":"256","messageId":"257","endLine":9,"endColumn":29},{"ruleId":"270","severity":1,"message":"271","line":56,"column":58,"nodeType":"272","messageId":"273","endLine":56,"endColumn":60},{"ruleId":"270","severity":1,"message":"271","line":57,"column":53,"nodeType":"272","messageId":"273","endLine":57,"endColumn":55},{"ruleId":"270","severity":1,"message":"271","line":58,"column":50,"nodeType":"272","messageId":"273","endLine":58,"endColumn":52},{"ruleId":"277","severity":1,"message":"328","line":90,"column":8,"nodeType":"279","endLine":90,"endColumn":104,"suggestions":"329"},{"ruleId":"270","severity":1,"message":"276","line":95,"column":72,"nodeType":"272","messageId":"273","endLine":95,"endColumn":74},{"ruleId":"254","severity":1,"message":"263","line":1,"column":10,"nodeType":"256","messageId":"257","endLine":1,"endColumn":18},{"ruleId":"254","severity":1,"message":"262","line":1,"column":20,"nodeType":"256","messageId":"257","endLine":1,"endColumn":29},{"ruleId":"254","severity":1,"message":"300","line":2,"column":29,"nodeType":"256","messageId":"257","endLine":2,"endColumn":37},{"ruleId":"254","severity":1,"message":"286","line":2,"column":39,"nodeType":"256","messageId":"257","endLine":2,"endColumn":42},{"ruleId":"254","severity":1,"message":"285","line":2,"column":44,"nodeType":"256","messageId":"257","endLine":2,"endColumn":47},{"ruleId":"254","severity":1,"message":"325","line":2,"column":49,"nodeType":"256","messageId":"257","endLine":2,"endColumn":59},{"ruleId":"254","severity":1,"message":"330","line":4,"column":8,"nodeType":"256","messageId":"257","endLine":4,"endColumn":17},{"ruleId":"258","replacedBy":"331"},{"ruleId":"260","replacedBy":"332"},{"ruleId":"254","severity":1,"message":"333","line":3,"column":10,"nodeType":"256","messageId":"257","endLine":3,"endColumn":21},{"ruleId":"270","severity":1,"message":"271","line":18,"column":18,"nodeType":"272","messageId":"273","endLine":18,"endColumn":20},{"ruleId":"254","severity":1,"message":"334","line":10,"column":8,"nodeType":"256","messageId":"257","endLine":10,"endColumn":10},{"ruleId":"270","severity":1,"message":"271","line":32,"column":10,"nodeType":"272","messageId":"273","endLine":32,"endColumn":12},{"ruleId":"277","severity":1,"message":"335","line":44,"column":5,"nodeType":"279","endLine":44,"endColumn":7,"suggestions":"336"},{"ruleId":"277","severity":1,"message":"337","line":54,"column":5,"nodeType":"279","endLine":54,"endColumn":22,"suggestions":"338"},{"ruleId":"270","severity":1,"message":"276","line":61,"column":56,"nodeType":"272","messageId":"273","endLine":61,"endColumn":58},{"ruleId":"270","severity":1,"message":"276","line":74,"column":56,"nodeType":"272","messageId":"273","endLine":74,"endColumn":58},{"ruleId":"270","severity":1,"message":"276","line":87,"column":56,"nodeType":"272","messageId":"273","endLine":87,"endColumn":58},{"ruleId":"277","severity":1,"message":"339","line":100,"column":5,"nodeType":"279","endLine":100,"endColumn":7,"suggestions":"340"},{"ruleId":"270","severity":1,"message":"276","line":104,"column":57,"nodeType":"272","messageId":"273","endLine":104,"endColumn":59},{"ruleId":"277","severity":1,"message":"341","line":122,"column":5,"nodeType":"279","endLine":122,"endColumn":25,"suggestions":"342"},{"ruleId":"270","severity":1,"message":"271","line":173,"column":52,"nodeType":"272","messageId":"273","endLine":173,"endColumn":54},{"ruleId":"298","severity":1,"message":"299","line":66,"column":25,"nodeType":"293","endLine":66,"endColumn":98},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","no-native-reassign",["343"],"no-negated-in-lhs",["344"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'jwt' is defined but never used.","'AdminPortal' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'jwt.rls', 'jwt.username', and 'user_list'. Either include them or remove the dependency array. You can also do a functional update 'set_user_list(u => ...)' if you only need 'user_list' in the 'set_user_list' call.","ArrayExpression",["345"],"React Hook useEffect has a missing dependency: 'userList'. Either include it or remove the dependency array. You can also do a functional update 'setUserlist(u => ...)' if you only need 'userList' in the 'setUserlist' call.",["346"],"React Hook useEffect has missing dependencies: 'jwt', 'props.username', and 'userList'. Either include them or remove the dependency array. You can also do a functional update 'setUserlist(u => ...)' if you only need 'userList' in the 'setUserlist' call.",["347"],"'Row' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["348"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'props' and 'username'. Either include them or remove the dependency array.",["349"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Dropdown' is defined but never used.","'Select' is defined but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'config', 'history', and 'token'. Either include them or remove the dependency array.",["350"],"'propTypes' is defined but never used.","React Hook useEffect has missing dependencies: 'offset', 'perPage', and 'sessions_list'. Either include them or remove the dependency array. You can also do a functional update 'set_sessions_list(s => ...)' if you only need 'sessions_list' in the 'set_sessions_list' call.",["351"],"React Hook useEffect has missing dependencies: 'perPage' and 'username'. Either include them or remove the dependency array.",["352"],"React Hook useEffect has missing dependencies: 'perPage' and 'sessions_list'. Either include them or remove the dependency array. You can also do a functional update 'set_sessions_list(s => ...)' if you only need 'sessions_list' in the 'set_sessions_list' call.",["353"],"'Button' is defined but never used.","'mode' is assigned a value but never used.","'subjects' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array. You can also do a functional update 'setUsers(u => ...)' if you only need 'users' in the 'setUsers' call.",["354"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'subjects' is defined but never used.","React Hook useEffect has a missing dependency: 'props.username'. Either include it or remove the dependency array.",["355"],"'subjectList' is assigned a value but never used.","'Pagination' is defined but never used.","'filter' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'availabilityCheck' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["356"],"'DayPicker' is defined but never used.",["343"],["344"],"'subjectList' is defined but never used.","'io' is defined but never used.","React Hook useCallback has a missing dependency: 'jwt.id'. Either include it or remove the dependency array.",["357"],"React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array. You can also do a functional update 'set_messages(m => ...)' if you only need 'messages' in the 'set_messages' call.",["358"],"React Hook useEffect has missing dependencies: 'handleReceiveMessage', 'jwt.rls', 'socket', 'user_list', and 'username'. Either include them or remove the dependency array. You can also do a functional update 'set_user_list(u => ...)' if you only need 'user_list' in the 'set_user_list' call.",["359"],"React Hook useEffect has missing dependencies: 'messages' and 'username'. Either include them or remove the dependency array. You can also do a functional update 'set_messages(m => ...)' if you only need 'messages' in the 'set_messages' call.",["360"],"no-global-assign","no-unsafe-negation",{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},"Update the dependencies array to be: [jwt.rls, jwt.username, user_list]",{"range":"393","text":"394"},"Update the dependencies array to be: [filters, userList]",{"range":"395","text":"396"},"Update the dependencies array to be: [jwt, props.username, userList]",{"range":"397","text":"398"},"Update the dependencies array to be: [username]",{"range":"399","text":"400"},"Update the dependencies array to be: [props, username]",{"range":"401","text":"402"},"Update the dependencies array to be: [config, history, token]",{"range":"403","text":"404"},"Update the dependencies array to be: [filters.studentFilter, filters.tutorFilter, filters.startDateFilter, filters.startTimeFilter, filters.endTimeFilter, filters.sessionSubjectFilter, sessions_list, perPage, offset]",{"range":"405","text":"406"},"Update the dependencies array to be: [perPage, username]",{"range":"407","text":"408"},"Update the dependencies array to be: [offset, perPage, sessions_list]",{"range":"409","text":"410"},"Update the dependencies array to be: [offset, users]",{"range":"411","text":"412"},"Update the dependencies array to be: [props.username]",{"range":"413","text":"414"},"Update the dependencies array to be: [nameFilter, emailFilter, usernameFilter, phoneFilter, role, subjectsFilter, availabilityFilter, props, availabilityCheck]",{"range":"415","text":"416"},"Update the dependencies array to be: [jwt.id]",{"range":"417","text":"418"},"Update the dependencies array to be: [messages, messages.offset]",{"range":"419","text":"420"},"Update the dependencies array to be: [handleReceiveMessage, jwt.rls, socket, user_list, username]",{"range":"421","text":"422"},"Update the dependencies array to be: [messages, messages.recipient, username]",{"range":"423","text":"424"},[1798,1800],"[jwt.rls, jwt.username, user_list]",[1893,1902],"[filters, userList]",[3566,3568],"[jwt, props.username, userList]",[1447,1449],"[username]",[783,785],"[props, username]",[961,963],"[config, history, token]",[3556,3703],"[filters.studentFilter, filters.tutorFilter, filters.startDateFilter, filters.startTimeFilter, filters.endTimeFilter, filters.sessionSubjectFilter, sessions_list, perPage, offset]",[4972,4974],"[perPage, username]",[5291,5299],"[offset, perPage, sessions_list]",[1344,1352],"[offset, users]",[823,825],"[props.username]",[3638,3734],"[nameFilter, emailFilter, usernameFilter, phoneFilter, role, subjectsFilter, availabilityFilter, props, availabilityCheck]",[1506,1508],"[jwt.id]",[1784,1801],"[messages, messages.offset]",[2972,2974],"[handleReceiveMessage, jwt.rls, socket, user_list, username]",[3658,3678],"[messages, messages.recipient, username]"]