[{"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/index.js":"1","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/reportWebVitals.js":"2","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Router.js":"3","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/CreateSessionForm.js":"4","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Homepage.js":"5","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Dashboard.js":"6","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/LoginForm.js":"7","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/NavBar.js":"8","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Profile.js":"9","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditUser.js":"10","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditSession.js":"11","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EmailRegistration.js":"12","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Chat.js":"13","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/PasswordReset.js":"14","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserCard.js":"15","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserSessions.js":"16","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SessionListing.js":"17","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SignUpForm.js":"18","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/AdminPortal.js":"19","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Errors.js":"20","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserTableListing.js":"21","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/utility.js":"22","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Filters.js":"23"},{"size":913,"mtime":1613593019248,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1608217291778,"results":"26","hashOfConfig":"25"},{"size":3326,"mtime":1615337089781,"results":"27","hashOfConfig":"25"},{"size":5464,"mtime":1615332959949,"results":"28","hashOfConfig":"25"},{"size":1632,"mtime":1613588057412,"results":"29","hashOfConfig":"25"},{"size":7091,"mtime":1615337138694,"results":"30","hashOfConfig":"25"},{"size":1800,"mtime":1613588065808,"results":"31","hashOfConfig":"25"},{"size":2616,"mtime":1616357021150,"results":"32","hashOfConfig":"25"},{"size":3956,"mtime":1616444338630,"results":"33","hashOfConfig":"25"},{"size":4606,"mtime":1615338373616,"results":"34","hashOfConfig":"25"},{"size":5103,"mtime":1615339250068,"results":"35","hashOfConfig":"25"},{"size":1112,"mtime":1613594124911,"results":"36","hashOfConfig":"25"},{"size":6657,"mtime":1616371180382,"results":"37","hashOfConfig":"25"},{"size":2787,"mtime":1615333189429,"results":"38","hashOfConfig":"25"},{"size":615,"mtime":1614810779146,"results":"39","hashOfConfig":"25"},{"size":3527,"mtime":1616446765145,"results":"40","hashOfConfig":"25"},{"size":1483,"mtime":1616446692337,"results":"41","hashOfConfig":"25"},{"size":8686,"mtime":1614896451216,"results":"42","hashOfConfig":"25"},{"size":3498,"mtime":1616448310317,"results":"43","hashOfConfig":"25"},{"size":777,"mtime":1614041680763,"results":"44","hashOfConfig":"25"},{"size":1185,"mtime":1616357194027,"results":"45","hashOfConfig":"25"},{"size":571,"mtime":1616452605572,"results":"46","hashOfConfig":"25"},{"size":8351,"mtime":1616451695606,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"f6ylb9",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/index.js",[],["106","107"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/reportWebVitals.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Router.js",["108","109","110","111"],"import React, { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport CreateSessionForm from \"./CreateSessionForm\";\nimport Dashboard from \"./Dashboard\";\nimport HomePage from \"./Homepage\";\nimport LoginForm from \"./LoginForm\";\nimport NavBar from \"./NavBar\";\nimport Profile from \"./Profile\";\nimport SignUpForm from \"./SignUpForm\";\nimport EditUser from './EditUser'\nimport jwt from 'jsonwebtoken';\nimport EditSessionForm from \"./EditSession\";\nimport Chat from \"./Chat\"\nimport EmailRegistration from \"./EmailRegistration\";\nimport PasswordReset from \"./PasswordReset\";\nimport AdminPortal from \"./AdminPortal\";\nimport Errors from \"./Errors\"\n\nconst AppRouter = () => {\n  let user = localStorage.getItem('token');\n  let decoded;\n  if(user){\n    try{\n      decoded = jwt.verify(user, '/NJIBYUGHBYUHIKNBJBYBTGYIUJNBGFB/')\n    }\n    catch(e){\n      console.log(e);\n    }\n    console.log(decoded)\n  }\n\n    return (\n        <BrowserRouter>\n          <div>\n            <NavBar username={decoded && decoded.username}/>\n            <Switch>\n                <Route path=\"/\" component={HomePage} exact />\n                <Route path=\"/finalize_registration\" component={EmailRegistration} exact />\n                <Route exact path=\"/reset_password\" component={PasswordReset} />\n                <Route path=\"/sign_up\" component={SignUpForm} exact/>\n                <Route  path=\"/sign_in\" component={LoginForm} exact/>\n                <Route path=\"/dashboard\" exact>\n                 {decoded && decoded.rls ? <Dashboard roles={decoded && decoded.rls} username={decoded && decoded.username}/> : <Errors error={401}/>}\n                </Route>\n                <Route path=\"/user/create_session\" exact>\n                {decoded && decoded.rls ? <CreateSessionForm roles={decoded && decoded.rls} username={decoded && decoded.username}/> :  <Errors error={401} />}\n                </Route>\n                <Route exact path=\"/user/sessions/:session/edit\" component={EditSessionForm}/>\n                <Route exact path=\"/user/:username\" render={({match})=>{\n                  return (\n                    <div>\n                    {decoded && decoded.rls ? <Profile username={decoded.username}/>:  <Errors error={401} />}\n                    </div>\n                  )\n                }}/>\n                <Route exact path=\"/user/:username/edit\" render={({match})=>{\n                  return (\n                    <div>\n                    {decoded && decoded.rls && match.params.username==decoded.username ?  <EditUser username={decoded.username}/> :  <Errors error={401} />}\n                    </div>\n                  )\n                }}/>\n                <Route exact path=\"/user/:username/chat\" render={({match})=>{\n                  return (\n                    <div>\n                    {decoded && decoded.rls && match.params.username==decoded.username ?  <Chat roles={decoded && decoded.rls}/> :  <Errors error={401} />}\n                    </div>\n                  )\n                }}/>\n                <Route exact path=\"/admin\">\n                  <AdminPortal />\n                </Route>\n                <Route>\n                <Errors error={404}/>\n                </Route>\n            </Switch>\n          </div>\n        </BrowserRouter>\n    )\n}\n\nexport default AppRouter;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/CreateSessionForm.js",["112","113","114","115","116","117"],"import React, { useEffect, useState } from 'react'\nimport { Form, Button, Dropdown } from 'react-bootstrap'\nimport DayPicker from \"react-day-picker\";\nimport TimePicker from 'react-time-picker'\nimport {useHistory} from 'react-router-dom'\nimport { axios_instance } from '..';\nimport Select from 'react-select'\nimport \"../../node_modules/react-time-picker/dist/TimePicker.css\";\nimport \"../../node_modules/react-clock/dist/Clock.css\";\nconst CreateSessionForm = (props) => {\n\n  const history = useHistory();\n  const [date, setDate] = useState('')\n  const [time, setTime] = useState('')\n  const [endTime, setEndTime] = useState('')\n  const [subject, setSubject] = useState('')\n  const [user_list, set_user_list] = useState([])\n  const [other_user, setOtherUser] = useState({})\n  const [errors, setErrors] = useState('')\n\n  useEffect(() => {\n    if (props.roles.includes('tutor')) {\n      axios_instance.get('http://127.0.0.1:5000/user/students')\n      .then(function (response) {\n        return response.data.filter(user => user.username!=props.username)\n       })\n        .then(function (response) {\n          console.log(response)\n          set_user_list([...user_list, ...response])\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n    if (props.roles.includes('student')) {\n      axios_instance.get('http://127.0.0.1:5000/user/tutors')\n      .then(function (response) {\n        return response.data.filter(user => user.username!=props.username)\n       })\n        .then(function (response) {\n          set_user_list([...user_list, ...response])\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }, [])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const session = {\n      subject: subject,\n      date: formatDateTime(date, time),\n      end_date: formatDateTime(date, endTime),\n      other_user: other_user\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    axios_instance.post('http://127.0.0.1:5000/user/sessions/new', session, config)\n      .then((res) => {\n        history.push(`/user/${props.username}`)\n      }).catch((err) => {\n        console.log(err)\n      })\n\n\n  }\n\n  const onDropdownSelect = (eventKey) => {\n    setSubject(eventKey);\n  }\n\n  const handleDayClick = (day, { selected }) => {\n    const selectedDay = selected ? undefined : day;\n    setDate(selectedDay)\n  }\n\n  const handleSelect = (selected) => {\n    setOtherUser(selected)\n  }\n\n  const onTimeChange = (time) => {\n    setTime(time)\n  }\n\n  const onEndTimeChange = (time) => {\n    setEndTime(time)\n  }\n  const formatDateTime = (date, time) => {\n    const hour = parseInt(time.substring(0, 1)) == 0 ? parseInt(time.substring(1, 2)) : parseInt(time.substring(0, 2))\n    const minutes = time.substring(2)\n    const amPM = hour < 12 ? 'AM' : 'PM'\n    const formatted_hour = hour > 12 ? hour - 12 : hour;\n    time = formatted_hour + minutes + \" \" + amPM\n    return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear() + \" \" + time;\n  }\n\n\n\n  return (\n    <div className=\"form-comp\">\n      <h1>Set up a Session</h1>\n      <Form onSubmit={handleSubmit}>\n        <Dropdown onSelect={onDropdownSelect}>\n            <Dropdown.Toggle variant=\"success\" className=\"subject\">\n              <span> {subject ? subject : \"Subject\"}</span>\n            </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item eventKey=\"Math\" >Math</Dropdown.Item>\n            <Dropdown.Item eventKey=\"English\">English</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Chemistry\">Chemistry</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Computer Science\">Computer Science</Dropdown.Item>\n            <Dropdown.Item eventKey=\"History\">History</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Physics\">Physics</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Biology\">Biology</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Form.Group controlId=\"session_attendee\">\n          <Form.Label>{props.roles.includes('tutor') ? 'Student' : 'Tutor'}</Form.Label>\n          <Select\n            className=\"select center\"\n            onChange={handleSelect}\n            options={user_list}\n            getOptionLabel={(option) => option.username}\n            getOptionValue={(option) => option._id}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label classname=\"block-label\">Date</Form.Label>\n          <div>\n            <DayPicker\n              className=\"calendar\"\n              disabledDays={{ before: new Date() }}\n              format=\"M/D/YYYY\"\n              name=\"date\"\n              id=\"date\"\n              onDayClick={handleDayClick}\n              selectedDays={date}\n            />\n          </div>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label className=\"block-label\">Start Time: </Form.Label>\n          <TimePicker\n            name=\"time\"\n            id=\"time\"\n            onChange={onTimeChange}\n            value={time}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label className=\"block-label\">End Time: </Form.Label>\n          <TimePicker\n            name=\"end_time\"\n            id=\"end_time\"\n            onChange={onEndTimeChange}\n            value={endTime}\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">Submit</Button>\n      </Form>\n    </div>);\n}\n\nexport default CreateSessionForm;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Homepage.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Dashboard.js",["118","119","120","121","122","123","124","125","126","127"],"import React, { useState, useEffect } from 'react'\nimport { axios_instance } from '..'\nimport UserCard from './UserCard'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport ReactPaginate from 'react-paginate'\nimport { Form, FormControl, Dropdown } from 'react-bootstrap'\nimport { NonceProvider } from 'react-select'\nimport ReactLoading from 'react-loading';\n//Add support for som1 who is tutor + student\nconst Dashboard = (props) => {\n  console.log(props.roles)\n  const [data, setData] = useState({\n    data: [],\n    filtered: [],\n    displayed: []\n  })\n  const [loading, setLoading] = useState(true);\n\n  const [filters, setFilters] = useState({\n    username: '',\n    fullName: '',\n    subject: '',\n    type: ''\n  })\n\n  const perPage = 20;\n  const pageCount = Math.ceil(data.data.length) / perPage;\n\n\n  useEffect(() => {\n    const filtered = data.data.filter((user) => {\n      setLoading(true);\n      const usernameCheck = user.username.toLowerCase().includes(filters.username);\n      const subjectCheck = user.roles.includes(\"tutor\") && user.tutoring_subjects ? user.tutoring_subjects.includes(filters.subject) : user.problem_subjects ? user.problem_subjects.includes(filters.subject) : false;\n      const typeCheck = user.roles.includes(filters.type);\n      const fullNameCheck = user.full_name.toLowerCase().includes(filters.fullName.toLowerCase());\n      let allChecks = true;\n\n      if (filters.username) {\n        allChecks = allChecks && usernameCheck;\n      }\n      if (filters.subject) {\n        allChecks = allChecks && subjectCheck;\n      }\n      if (filters.fullName) {\n        allChecks = allChecks && fullNameCheck;\n      }\n      if (filters.type) {\n        allChecks = allChecks && typeCheck;\n      }\n      return allChecks\n    })\n    setLoading(false);\n    setData({ ...data, filtered: filtered, displayed: filtered.slice(0, perPage) })\n  }, [filters])\n\n\n  useEffect(() => {\n    console.log(props.username)\n    if (props.roles.includes('student') && props.roles.includes('tutor')) {\n      axios_instance.get('http://127.0.0.1:5000/user')\n        .then((res) =>{\n          return res.data.filter(user => user.username != props.username)\n        })\n        .then((response) => {\n          setData({ ...data, data: response, filtered: response, displayed: response.slice(0, perPage) })\n        })\n        .then(() => {\n          setLoading(false);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n    else if (props.roles.includes('tutor')) {\n      axios_instance.get('http://127.0.0.1:5000/user/students')\n        .then((res) => {\n          return res.data.filter(user => user.username != props.username)\n        })\n        .then(function (response) {\n          setData({ ...data, data: response, filtered: response, displayed: response.slice(0, perPage) })\n        })\n        .then(() => {\n          setLoading(false);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n    else if (props.roles.includes('student')) {\n      axios_instance.get('http://127.0.0.1:5000/user/tutors')\n        .then((res) => {\n          return res.data.filter(user => user.username != props.username)\n        })\n        .then(function (response) {\n          setData({ ...data, data: response, filtered: response, displayed: response.slice(0, perPage) })\n        })\n        .then(() => {\n          setLoading(false);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }, [])\n\n\n\n  const handlePageClick = (e) => {\n    let selected = e.selected;\n    let offset = Math.ceil(selected * perPage);\n    setData({ ...data, displayed: perPage >= data.filtered.length ? data.filtered.slice(offset, data.filtered.length) : data.filtered.slice(offset, offset + 2) })\n  };\n\n\n  const userDash = data.displayed.map((user) => {\n    return (\n      <UserCard className=\"user_card\" key={user._id.$oid} full_name={user.full_name} username={user.username} bio={user.biography} />\n    )\n  })\n\n  const setUsernameFilter = (e) => {\n    setFilters({ ...filters, username: e.target.value })\n  }\n  const setNameFilter = (e) => {\n    setFilters({ ...filters, fullName: e.target.value })\n  }\n\n  const onDropdownSelect = (eventKey) => {\n    setFilters({ ...filters, subject: eventKey });\n  }\n\n  const setRoleFilter = (e) => {\n    setFilters({ ...filters, type: e.target.value })\n  }\n\n  return (\n    <div>\n      <h1>Users</h1>\n      <div>\n        <Form className=\"form-comp\">\n          <FormControl className=\"user-username\" type=\"text\" name=\"username\" placeholder=\"Username\" onChange={setUsernameFilter} />\n\n          <FormControl className=\"user-fullname\" type=\"text\" name=\"fullname\" placeholder=\"Name\" onChange={setNameFilter} />\n          {//filter by student/tutor option if you're both a student & tutor\n            props.roles.includes(\"tutor\") && props.roles.includes(\"student\") ? (\n              <Form.Group controlId=\"role\">\n                <Form.Check\n                  inline\n                  value=\"tutor\"\n                  name=\"role\"\n                  label=\"Tutor\"\n                  type=\"radio\"\n                  id=\"tutor\"\n                  onClick={setRoleFilter}\n                />\n                <Form.Check\n                  inline\n                  value=\"student\"\n                  name=\"role\"\n                  label=\"Student\"\n                  type=\"radio\"\n                  id=\"student\"\n                  onClick={setRoleFilter}\n                />\n              </Form.Group>) : null}\n          <Dropdown onSelect={onDropdownSelect}>\n            <Dropdown.Toggle variant=\"success\" className=\"subject\">\n              <span> {filters.subject ? filters.subject : \"Subject\"}</span>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item eventKey=\"Math\" >Math</Dropdown.Item>\n              <Dropdown.Item eventKey=\"English\">English</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Chemistry\">Chemistry</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Computer Science\">Computer Science</Dropdown.Item>\n              <Dropdown.Item eventKey=\"History\">History</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Physics\">Physics</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Biology\">Biology</Dropdown.Item>\n              <Dropdown.Item eventKey=\"\">None</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Form>\n      </div>\n\n      {loading && <ReactLoading type={\"spin\"} color={\"white\"} height={'10%'} width={'10%'} className=\"loading_spinner\" />}\n      {userDash.length != 0 ? <div className=\"userdash\">{userDash}</div> : <h3>No matching users found</h3>}\n\n\n      <ReactPaginate\n        pageCount={pageCount}\n        pageRangeDisplayed={5}\n        marginPagesDisplayed={5}\n        onPageChange={handlePageClick}\n        containerClassName={'pagination'}\n        subContainerClassName={'pages pagination'}\n        activeClassName={'active'}\n        previousLabel={'Previous'}\n        nextLabel={'Next'}\n        breakLabel={'...'}\n      />\n\n    </div >\n  )\n}\n\n\nexport default Dashboard;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/LoginForm.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/NavBar.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Profile.js",["128","129","130","131","132","133","134"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditUser.js",["135"],"import React, { useEffect, useState } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useParams, useHistory } from \"react-router-dom\";\nimport DayPicker, { DateUtils } from \"react-day-picker\";\nimport { axios_instance } from '..';\n//OK. ADD PAGINATION TO CHAT. DONE.\nconst EditUser = (props) => {\n  let { username } = useParams();\n  const history = useHistory();\n  const [dates, setDates] = useState([])\n\n\n  if (props.location && props.location.state) {\n    let savedState = JSON.stringify(props.location.state);\n    localStorage.setItem('user', savedState);\n  }\n\n  const [user, set_user] = useState({});\n\n\n  useEffect(() => {\n    axios_instance.get(`/user/${props.username}`).then((res) => {\n      set_user(res.data);\n    })\n  }, [])\n\n  const handleChange = (e) => {\n    const updated_user = {\n      ...user,\n      [e.target.id]: e.target.value\n    }\n    set_user(updated_user)\n  }\n\n  const handleDayClick = (day, { selected }) => {\n    if (selected) {\n      const selectedIndex = dates.findIndex(selectedDay =>\n        DateUtils.isSameDay(selectedDay, day)\n      );\n      dates.splice(selectedIndex, 1)\n      setDates(dates)\n    }\n    else {\n      setDates([...dates, day])\n    }\n  }\n\n  const parse_dates = (date_list) => {\n    console.log(date_list)\n    return date_list.map((date) => {\n      return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n    })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let parsed_availability = ''\n    if (dates.length!==0) {\n     parsed_availability = parse_dates(user.availability);\n    }\n    const edited_user = {\n      email: user.email,\n      full_name: user.full_name,\n      username: user.username,\n      biography: user.biography,\n      roles: user.roles,\n      availability: parsed_availability,\n      us_phone_number: user.us_phone_number\n    }\n    const config = {\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    }\n    axios_instance.post(`http://127.0.0.1:5000/user/${username}/edit`, edited_user, config)\n      .then(function (res) {\n        localStorage.setItem(\"token\", res.data.access_token)\n        history.push(\"/\");\n        window.location.reload(true)\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  return (\n    <div className=\"form-comp\">\n      <h1>Edit</h1>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control type=\"email\" value={user.email || ' '} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"username\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control type=\"text\" value={user.username || ' '} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"us_phone_number\">\n          <Form.Label>Phone Number</Form.Label>\n          <Form.Control type=\"tel\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" value={user.us_phone_number || ''} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"biography\">\n          <Form.Label>Tell us about yourself!</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} value={user.biography || ' '} onChange={handleChange} />\n        </Form.Group>\n\n        <Form.Group controlId=\"role\">\n          <Form.Check\n            inline\n            value=\"tutor\"\n            name=\"roles\"\n            label=\"Tutor\"\n            type=\"radio\"\n            id=\"roles\"\n            onClick={handleChange}\n          />\n          <Form.Check\n            inline\n            value=\"student\"\n            name=\"role\"\n            label=\"Student\"\n            type=\"radio\"\n            id=\"roles\"\n            onClick={handleChange}\n          />\n\n          <Form.Check\n            inline\n            value=\"student,tutor\"\n            name=\"role\"\n            label=\"Both\"\n            type=\"radio\"\n            id=\"both\"\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"availability\">\n          <Form.Label>Availability</Form.Label>\n          <DayPicker\n            className=\"calendar\"\n            format=\"MM/DD/YYYY\"\n            name=\"availability\"\n            onDayClick={handleDayClick}\n            selectedDays={dates}\n          />\n\n        </Form.Group>\n\n        <Form.Group>\n          <span>Forgot password? Click<a href=\"/reset_password\"> Here</a></span>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>);\n}\n\nexport default EditUser;\n\n","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EditSession.js",["136","137","138","139","140"],"import React, { useEffect, useState } from 'react';\nimport { Form, Button, Dropdown } from 'react-bootstrap'\nimport { useHistory } from \"react-router-dom\";\nimport DayPicker, { DateUtils } from \"react-day-picker\";\nimport { axios_instance } from '..';\nimport Select from 'react-select'\nimport \"../../node_modules/react-time-picker/dist/TimePicker.css\";\nimport \"../../node_modules/react-clock/dist/Clock.css\";\nimport TimePicker from 'react-time-picker'\n\n\nconst EditSessionForm = (props) => {\n  const history = useHistory();\n  const [endTime, setEndTime] = useState('')\n  const [time, setTime] = useState('')\n  const [session, setSession] = useState(props.location.state.session);\n  const [errors, setErrors] = useState('')\n\n  const handleErrors = () => {\n    if (!time || !endTime || time > endTime) {\n      setErrors('Invalid time');\n    }\n    else {\n      setErrors('')\n    }\n    return errors;\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    handleErrors();\n    if (!errors) {\n      const subject = e.target.subject.value;\n      const edited_session = {\n        ...session,\n        subject: subject,\n        end_time: endTime,\n        date: formatDateTime(session.date, time),\n      }\n\n      const config = {\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      }\n\n      axios_instance.post(`/user/sessions/${session._id.$oid}/edit`, edited_session, config)\n        .then(() => {\n          history.push(`/`)\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }\n\n\n  const handleDayClick = (day, { selected }) => {\n    const selectedDay = selected ? undefined : day;\n    const updated_session = { ...session, date: selectedDay }\n    setSession(updated_session);\n  }\n\n  const onTimeChange = (time) => {\n    setTime(time);\n  }\n\n  const onEndTimeChange = (time) => {\n    setEndTime(time);\n  }\n  const formatDateTime = (date, time) => {\n    const hour = parseInt(time.substring(0, 1)) == 0 ? parseInt(time.substring(1, 2)) : parseInt(time.substring(0, 2))\n    const minutes = time.substring(2)\n    const amPM = hour < 12 ? 'AM' : 'PM'\n    const formatted_hour = hour > 12 ? hour - 12 : hour;\n    time = formatted_hour + minutes + \" \" + amPM\n    console.log(date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear() + \" \" + time)\n    return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear() + \" \" + time;\n  }\n\n  const onDropdownSelect = (eventKey) => {\n    setSession({ ...session, subject: eventKey });\n  }\n\n\n  const handleChange = (e) => {\n    const updated_session = {\n      ...session,\n      [e.target.id]: e.target.value\n    }\n    setSession(updated_session)\n  }\n\n  return (\n    <div className=\"form-comp\">\n      <h1>Edit Session</h1>\n      <span className=\"errors\">{errors}</span>\n      <Form onSubmit={handleSubmit}>\n\n        <Dropdown onSelect={onDropdownSelect}>\n          <Dropdown.Toggle variant=\"success\" className=\"subject\" id=\"subject\">\n          <span> {session.subject ? session.subject : \"Choose Subject\"}</span>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item eventKey=\"Math\" >Math</Dropdown.Item>\n            <Dropdown.Item eventKey=\"English\">English</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Chemistry\">Chemistry</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Computer Science\">Computer Science</Dropdown.Item>\n            <Dropdown.Item eventKey=\"History\">History</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Physics\">Physics</Dropdown.Item>\n            <Dropdown.Item eventKey=\"Biology\">Biology</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Form.Group controlId=\"tutor\">\n          <Form.Label>Tutor</Form.Label>\n          <Form.Control type=\"text\" value={session.tutor.username} />\n        </Form.Group>\n\n        <Form.Group controlId=\"student\">\n          <Form.Label>Student</Form.Label>\n          <Form.Control type=\"text\" value={session.student.username} />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Date</Form.Label>\n          <DayPicker\n            className=\"calendar\"\n            // disabledDays={{ before: new Date() }}\n            format=\"M/D/YYYY\"\n            name=\"date\"\n            id=\"date\"\n            onDayClick={handleDayClick}\n            selectedDays={new Date(session.date)}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label className=\"block-label\">Start Time</Form.Label>\n          <TimePicker\n            name=\"time\"\n            id=\"time\"\n            onChange={onTimeChange}\n            value={time}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label className=\"block-label\">End Time</Form.Label>\n          <TimePicker\n            name=\"end_time\"\n            id=\"end_time\"\n            onChange={onEndTimeChange}\n            value={endTime}\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">Submit</Button>\n      </Form>\n    </div>);\n}\n\n\nexport default EditSessionForm;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/EmailRegistration.js",["141"],"import React, { useEffect} from 'react'\nimport {useLocation, useHistory} from 'react-router-dom'\nimport axios from 'axios'\n\nconst EmailRegistration = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const token = location.search.substr(7);\n    console.log(token)\n    const config = {\n        crossDomain: true,\n        headers: {\n          'Authorization':  ` Bearer ${token}`\n      }\n      }\n    useEffect(()=>{\n        axios.get('http://127.0.0.1:5000/finalize', config)\n       .then((res)=>{\n            // if(res.data.access_token){\n                setTimeout(()=>{\n                    localStorage.clear()\n                    localStorage.setItem(\"token\", res.data.access_token);\n                    history.push(\"/\")\n                    window.location.reload(true)\n                }, 2000)\n           // }\n        })\n        .catch((err)=>{\n            console.log(token)\n            console.log(err);\n        })\n\n    }, [])\n    return (\n    <div>\n        <h1>Successful registration</h1>\n        <p>Redirecting home...</p>\n    </div>)\n}\n\nexport default EmailRegistration;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Chat.js",["142","143","144","145","146","147","148","149"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { axios_instance } from '..';\nimport Select from 'react-select';\nimport jwt_decode from 'jwt-decode'\nimport ReactLoading from 'react-loading';\nimport ReactPaginate from 'react-paginate';\nimport {parseDate} from '../utility'\nconst Chat = (props) => {\n  const { username } = useParams();\n  const [messages, set_messages] = useState({\n    displayed: [],\n    messages: []\n  });\n  const [user_list, set_user_list] = useState([]);\n  const [recipient, set_recipient] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const perPage = 10;\n  let pageCount = Math.ceil(messages.messages.length) / perPage;\n\n\n  useEffect(()=>{\n    console.log(messages.messages, messages.messages.slice(offset, offset + perPage))\n   set_messages({\n     ...messages,\n     displayed: (offset + perPage >= messages.messages.length ? messages.messages.slice(offset, messages.messages.length) : messages.messages.slice(offset, offset + perPage))\n   })\n  }, [offset])\n\n  const config = {\n    xhrFields: {\n      withCredentials: true\n    },\n    crossDomain: true,\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  }\n\n  useEffect(() => {\n    //Two ifs do not work? Must call axios twice in one if or else one is not considered? \n    if (props.roles.includes('student') && props.roles.includes('tutor')) {\n      axios_instance.get('http://127.0.0.1:5000/user')\n        .then(function (response) {\n          return response.data.filter(user => user.username != username)\n        })\n        .then((res) => {\n          set_user_list([...user_list, ...res])\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n    else if (props.roles.includes('tutor')) {\n      axios_instance.get('http://127.0.0.1:5000/user/students')\n        .then(function (response) {\n          return response.data.filter(user => user.username != username)\n        })\n        .then((res) => {\n          set_user_list([...user_list, ...res])\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n\n    else if (props.roles.includes('student')) {\n      axios_instance.get('http://127.0.0.1:5000/user/tutors')\n        .then(function (response) {\n          return response.data.filter(user => user.username != username)\n        })\n        .then((res) => {\n          set_user_list([...user_list, ...res])\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }, [])\n\n  useEffect(() => {\n    if (recipient && recipient.username != undefined) {\n      new Promise((resolve, reject) => {\n        resolve(setLoading(true))\n        setOffset(0);\n      })\n        .then\n        (() => axios_instance.get(`http://127.0.0.1:5000/user/${username}/chat/${recipient._id.$oid}`, config))\n        .then((res) => {\n          if (res.data) {\n            set_messages({displayed: (offset + perPage >= res.data.length ? res.data.slice(offset, res.data.length) : res.data.slice(offset, offset + perPage)), messages: [...res.data]});\n          }\n        })\n        .then(() => {\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }, [recipient])\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    const message = {\n      recipient: recipient._id.$oid,\n      body: e.target.message.value,\n      sender: jwt_decode(localStorage.getItem(\"token\")).id\n    }\n\n    axios_instance.post(`http://127.0.0.1:5000/user/${username}/chat/${recipient._id.$oid}`, message, config)\n      .then((res) => {\n        const newArr = [...messages.messages, res.data]\n        set_messages({\n          displayed: (offset + perPage >= newArr.length ? newArr.slice(offset, newArr.length) : newArr.slice(offset, offset + perPage)),\n          messages: newArr});\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n\n  }\n\n  const handleSelect = (selected) => {\n    set_recipient(selected)\n    set_messages({\n      displayed: [],\n      messages: []\n    })\n  }\n\n  const handlePageClick = (e) => {\n    let selected = e.selected;\n    let offset = Math.ceil(selected * perPage);\n    setOffset(offset);\n  };\n\n  const message_list = messages.displayed.map((message) => {\n\n    let message_class = recipient._id.$oid == message.sender.$oid ? \"recieved\" : \"sent\";\n\n    const date = new Date(message.timestamp.$date);\n\n    const timestamp = parseDate(date)\n\n    return (\n      <div className={`message ${message_class}`}>\n        <span className=\"message_text\">{message.body}</span>\n        <span className=\"message_time\">{timestamp}</span>\n\n      </div>)\n  })\n\n\n  return (\n    <Form onSubmit={handleSubmit} className=\"message_form\">\n      {recipient ? <div>\n        <h2 class=\"username\">{recipient.username}</h2>\n        {loading && <ReactLoading type={\"spin\"} color={\"white\"} height={'10%'} width={'10%'} className=\"loading_spinner\" />}\n        <div >{message_list.length !== 0 ?\n          <div className=\"message_list\">\n            {message_list}\n            < ReactPaginate\n              pageCount={pageCount}\n              pageRangeDisplayed={5}\n              marginPagesDisplayed={5}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              subContainerClassName={'pages pagination'}\n              activeClassName={'active'}\n              previousLabel={'Previous'}\n              nextLabel={'Next'}\n              breakLabel={'...'}\n            />\n          </div> :\n          <span class=\"flavor-text\">Start a conversation</span>}</div>\n      </div>\n        : <div> <h2>Chat</h2><span class=\"flavor-text\">Select someone to chat with.</span></div>}\n\n      <div className=\"message_form_input\">\n        <div>\n          <Select\n            menuPortalTarget={document.querySelector('body')}\n            maxMenuHeight={220}\n            classNamePrefix=\"react-select\"\n            className=\"select center\"\n            onChange={handleSelect}\n            options={user_list}\n            getOptionLabel={(option) => option.username}\n            getOptionValue={(option) => option._id}\n          />\n        </div>\n        {recipient && (\n          <div>\n            <Form.Group controlId=\"message\">\n              <Form.Control type=\"text\" placeholder=\"Message\" />\n            </Form.Group>\n            <Button type=\"submit\">Send</Button>\n          </div>)}\n      </div>\n    </Form>\n  )\n}\n\nexport default Chat;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/PasswordReset.js",["150"],"\nimport React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport axios from 'axios'\n\nconst PasswordReset = () => {\n    const history = useHistory();\n    const location = useLocation();\n    const token = location.search.substr(7);\n    const [passwordEmailSent, setPasswordEmailSent] = useState(false)\n    const resetPassword = (e) => {\n        e.preventDefault();\n        const config = {\n            crossDomain: true,\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            }\n        }\n\n        axios.post('http://127.0.0.1:5000/reset_password', { password: e.target.new_pass.value, confirmNewPassword: e.target.confirm_new_pass.value }, config)\n            .then((res) => {\n                history.push(`/`)\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    const sendResetEmail = (e) => {\n        const config = {\n            crossDomain: true,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n        e.preventDefault();\n        const data = {\n            email: e.target.email.value\n        }\n        axios.post('http://127.0.0.1:5000/send_password_email', data, config)\n            .then((res) => {\n                setPasswordEmailSent(true);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    return (\n        <div>\n            <h1>Reset Your Password</h1>\n            { token ?\n                (\n\n                    <Form onSubmit={resetPassword}>\n                        <Form.Group controlId=\"new_pass\">\n                            <Form.Label>New password</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"confirm_new_pass\">\n                            <Form.Label>Confirm new password</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n                        <Button type=\"submit\">Submit</Button>\n                    </Form>\n                )\n                :\n                (\n                    <Form onSubmit={sendResetEmail}>\n                        {passwordEmailSent && <span className=\"flavor_text\">Password Reset Email Sent</span>}\n                        <Form.Group controlId=\"email\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n                        <Button type=\"submit\">Send</Button>\n                    </Form>)\n            }\n        </div>\n    )\n}\n\nexport default PasswordReset;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserCard.js",[],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserSessions.js",["151","152"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SessionListing.js",["153","154"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/SignUpForm.js",["155","156","157","158"],"import { React, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap'\nimport DayPicker, { DateUtils } from \"react-day-picker\";\nimport axios from 'axios'\n\nconst SignUpForm = () => {\n  const [dates, setDates] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [role, setRole] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [bestSubjects, setBestSubjects] = useState([]);\n  const [problemSubjects, setProblemSubjects] = useState([]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const email = e.target.email.value;\n    const full_name = e.target.full_name.value;\n    const username = e.target.username.value;\n    const password = e.target.password.value;\n    const biography = e.target.biography ? e.target.biography.value : '';\n    const us_phone_number = e.target.us_phone_number.value;\n    const meeting_link = e.target.meeting_link ? e.target.meeting_link.value : ' ';\n    const profile_picture = e.target.profile_picture.files[0];\n\n    const bodyFormData = new FormData();\n\n    bodyFormData.append(\"email\", email);\n    bodyFormData.append('full_name', full_name);\n    bodyFormData.append('password', password);\n    bodyFormData.append('us_phone_number', us_phone_number);\n    bodyFormData.append('profile_picture', profile_picture);\n    bodyFormData.append('biography', biography)\n    bodyFormData.append('username', username);\n    bodyFormData.append('availability', dates.map((date) => {\n      console.log(date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear())\n      return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n    }));\n\n    if (role.includes(\"tutor\")) {\n      bodyFormData.append('meeting_link', meeting_link);\n      bodyFormData.append('tutor_subjects', bestSubjects);\n    }\n\n    if (role.includes(\"student\")) {\n      bodyFormData.append('problem_subjects', problemSubjects);\n    }\n\n    setSubmitted(true);\n    axios.post('http://127.0.0.1:5000/user/sign_up', bodyFormData)\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  const updateRole = (e) => {\n    setRole(e.target.value)\n  }\n\n  const handleDayClick = (day, { selected }) => {\n    const arr = [...dates];\n    if (selected) {\n      const selectedIndex = arr.findIndex(selectedDay =>\n        DateUtils.isSameDay(selectedDay, day)\n      );\n      arr.splice(selectedIndex, 1);\n      setDates(arr);\n    }\n    else {\n      setDates([...dates, day]);\n    }\n  }\n\n  const conditionalSubjectType = () => {\n    let returnedTypes = [];\n    const tutor = (\n      <div>\n        <Form.Group controlId=\"conditional\">\n          <Form.Group controlId=\"meeting_link\">\n            <Form.Label>*Meeting Link</Form.Label>\n            <Form.Control type=\"text\" />\n          </Form.Group>\n          <Form.Group controlId=\"subjects\">\n            <Form.Label>Best Subjects</Form.Label>\n            {subjects(false)}\n          </Form.Group>\n        </Form.Group>\n      </div>\n    )\n\n    const student =\n      (<Form.Group controlId=\"problem_subjects\">\n        <Form.Label>Problem Subjects</Form.Label>\n        {subjects(true)}\n      </Form.Group>)\n\n    if (role.includes(\"tutor\")) {\n      returnedTypes.push(tutor);\n    }\n\n    if (role.includes(\"student\")) {\n      returnedTypes.push(student);\n    }\n\n    return returnedTypes;\n\n  }\n\n  const conditionalCheck = (problem) => {\n    let onCheckChange;\n    if (!problem) {\n      onCheckChange = (e) => {\n        if (bestSubjects.includes(e.target.value)) {\n          setBestSubjects(bestSubjects.filter(element => element != e.target.value));\n          console.log(bestSubjects);\n        }\n        else {\n          setBestSubjects([...bestSubjects, e.target.value])\n          console.log(bestSubjects);\n        }\n\n      }\n    }\n    else {\n      onCheckChange = (e) => {\n        if (problemSubjects.includes(e.target.value)) {\n          setProblemSubjects(problemSubjects.filter(element => element != e.target.value));\n          console.log(problemSubjects);\n        }\n        else {\n          setProblemSubjects([...problemSubjects, e.target.value]);\n          console.log(problemSubjects);\n        }\n      }\n    }\n\n    return onCheckChange;\n  }\n\n  const subjects = (problem) => {\n    const subjects = ['Math', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Computer Science']\n    let id = problem ? \"problem\" : \"best\"\n    return (\n      <div>\n        <Form.Group controlId={`math ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Math\" label=\"Math\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`physics ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Physics\" label=\"Physics\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`chemistry ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Chemistry\" label=\"Chemistry\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`biology ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Biology\" label=\"Biology\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`english ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"English\" label=\"English\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`history ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"History\" label=\"History\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n        <Form.Group controlId={`compsci ${id}`}>\n          <Form.Check type=\"checkbox\" value=\"Computer Science\" label=\"Computer Science\" onChange={conditionalCheck(problem)} />\n        </Form.Group>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"form-comp\">\n      <h1>Sign Up</h1>\n\n      {errors ? <span className=\"form-error\">{errors}</span> : null}\n      {submitted && errors.length === 0 ? <span className=\"form-text\">Please check your email to finish activating your account.</span> : null}\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control name=\"email\" type=\"email\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"full_name\">\n          <Form.Label>Full Name</Form.Label>\n          <Form.Control name=\"full_name\" type=\"text\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"username\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control name=\"username\" type=\"text\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control name=\"password\" type=\"password\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"us_phone_number\">\n          <Form.Label>Phone Number</Form.Label>\n          <Form.Control name=\"us_phone_number\" type=\"tel\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" required />\n        </Form.Group>\n\n        <Form.Group controlId=\"biography\">\n          <Form.Label>Tell us about yourself!</Form.Label>\n          <Form.Control name=\"biography\" as=\"textarea\" rows={3} />\n        </Form.Group>\n\n        {conditionalSubjectType()}\n        <Form.Group controlId=\"role\">\n          <Form.Check\n            inline\n            value=\"tutor\"\n            name=\"role\"\n            checked={role === \"tutor\"}\n            label=\"Tutor\"\n            type=\"radio\"\n            id=\"tutor\"\n            onClick={updateRole}\n          />\n          <Form.Check\n            inline\n            value=\"student\"\n            name=\"role\"\n            checked={role === \"student\"}\n            label=\"Student\"\n            type=\"radio\"\n            id=\"student\"\n            onClick={updateRole}\n          />\n          <Form.Check\n            inline\n            value=\"student,tutor\"\n            name=\"role\"\n            checked={role === \"student,tutor\"}\n            label=\"Both\"\n            type=\"radio\"\n            id=\"both\"\n            onClick={updateRole}\n          />\n        </Form.Group>\n\n        <Form.Label>Profile Picture</Form.Label>\n        <input accept=\".jpg,.png,.jpeg\" type=\"file\" name=\"profile_picture\" />\n\n        <Form.Group controlId=\"availability\">\n          <Form.Label>*Availability</Form.Label>\n\n          <DayPicker\n            className=\"calendar\"\n            disabledDays={{ before: new Date() }}\n            format=\"MM/DD/YYYY\"\n            name=\"availability\"\n            onDayClick={handleDayClick}\n            selectedDays={dates}\n          />\n\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n\n      </Form>\n\n    </div>);\n}\n\nexport default SignUpForm;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/AdminPortal.js",["159","160","161","162","163","164","165","166","167","168","169","170","171"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Errors.js",["172"],"import { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Errors = (props) => {\nconsole.log(props.error)\n    const determineRendered = () => {\n        switch (props.error) {\n            case 401:\n                return (\n                <div>\n                    <h1>401</h1>\n                    <h2>You do not have access to this page</h2>\n                    <Link to=\"/\">Home</Link>\n                </div>);\n            case 404: \n                return (\n                <div>\n                    <h1>404</h1>\n                    <h2>The page was not found.</h2>\n                    <Link to=\"/\">Home</Link>\n                </div>)\n        }\n    }\n    return (\n        <div>\n            {determineRendered()}\n        </div>\n    )\n}\n\n\nexport default Errors;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/UserTableListing.js",["173"],"import { useState, useEffect } from 'react'\nimport { axios_instance } from '../index'\nconst UserTableListing = (props) => {\n  const [hours, setHours] = useState(0);\n  //state is setting, bleeding in to other states. Check if this is api failure or this failure. console.logs.. goodnight\n  const getHours = async (username) => {\n    const res = await axios_instance.get(`/user/${username}/tutoring_history?hours=true`)\n    return res.data;\n  }\n\n  useEffect(() => {\n    if (props.username) {\n      getHours(props.username)\n        .then((res) => {\n          setHours(res.hours)\n        })\n    }\n    else {\n      console.log(\"NO USER FOUND\")\n    }\n  }, [])\n\n  return (\n \n      <tr className=\"userListing\">\n        <td>{props.full_name}</td>\n        <td>{props.username}</td>\n        <td>{props.email}</td>\n        <td>{props.us_phone_number}</td>\n        <td>{props.roles}</td>\n        <td>{props.tutor_subjects && props.tutor_subjects.length !== 0 ? props.tutor_subjects.join(\", \") : \"N/A\"}</td>\n        <td>{props.tutor_subjects && props.problem_subjects.length !== 0 ? props.problem_subjects : \"N/A\"}</td>\n        <td>{hours}</td>\n      </tr>\n\n  );\n}\n\n\nexport default UserTableListing;","/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/utility.js",["174"],"/home/emily/Coding/tutoring_site/chem_tutoring_frontend/src/Components/Filters.js",["175","176","177","178","179","180","181","182","183","184","185","186","187"],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":26},{"ruleId":"192","severity":1,"message":"196","line":1,"column":28,"nodeType":"194","messageId":"195","endLine":1,"endColumn":36},{"ruleId":"197","severity":1,"message":"198","line":63,"column":69,"nodeType":"199","messageId":"200","endLine":63,"endColumn":71},{"ruleId":"197","severity":1,"message":"198","line":70,"column":69,"nodeType":"199","messageId":"200","endLine":70,"endColumn":71},{"ruleId":"192","severity":1,"message":"201","line":19,"column":10,"nodeType":"194","messageId":"195","endLine":19,"endColumn":16},{"ruleId":"192","severity":1,"message":"202","line":19,"column":18,"nodeType":"194","messageId":"195","endLine":19,"endColumn":27},{"ruleId":"197","severity":1,"message":"203","line":25,"column":58,"nodeType":"199","messageId":"200","endLine":25,"endColumn":60},{"ruleId":"197","severity":1,"message":"203","line":39,"column":58,"nodeType":"199","messageId":"200","endLine":39,"endColumn":60},{"ruleId":"204","severity":1,"message":"205","line":48,"column":6,"nodeType":"206","endLine":48,"endColumn":8,"suggestions":"207"},{"ruleId":"197","severity":1,"message":"198","line":95,"column":49,"nodeType":"199","messageId":"200","endLine":95,"endColumn":51},{"ruleId":"192","severity":1,"message":"208","line":4,"column":10,"nodeType":"194","messageId":"195","endLine":4,"endColumn":19},{"ruleId":"192","severity":1,"message":"209","line":4,"column":21,"nodeType":"194","messageId":"195","endLine":4,"endColumn":24},{"ruleId":"192","severity":1,"message":"210","line":4,"column":26,"nodeType":"194","messageId":"195","endLine":4,"endColumn":29},{"ruleId":"192","severity":1,"message":"211","line":7,"column":10,"nodeType":"194","messageId":"195","endLine":7,"endColumn":23},{"ruleId":"204","severity":1,"message":"212","line":55,"column":6,"nodeType":"206","endLine":55,"endColumn":15,"suggestions":"213"},{"ruleId":"197","severity":1,"message":"203","line":63,"column":56,"nodeType":"199","messageId":"200","endLine":63,"endColumn":58},{"ruleId":"197","severity":1,"message":"203","line":79,"column":56,"nodeType":"199","messageId":"200","endLine":79,"endColumn":58},{"ruleId":"197","severity":1,"message":"203","line":94,"column":56,"nodeType":"199","messageId":"200","endLine":94,"endColumn":58},{"ruleId":"204","severity":1,"message":"214","line":106,"column":6,"nodeType":"206","endLine":106,"endColumn":8,"suggestions":"215"},{"ruleId":"197","severity":1,"message":"203","line":187,"column":24,"nodeType":"199","messageId":"200","endLine":187,"endColumn":26},{"ruleId":"192","severity":1,"message":"216","line":8,"column":8,"nodeType":"194","messageId":"195","endLine":8,"endColumn":13},{"ruleId":"204","severity":1,"message":"217","line":39,"column":8,"nodeType":"206","endLine":39,"endColumn":10,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":51,"column":41,"nodeType":"221","endLine":51,"endColumn":174},{"ruleId":"222","severity":1,"message":"223","line":51,"column":183,"nodeType":"221","endLine":51,"endColumn":277},{"ruleId":"197","severity":1,"message":"198","line":54,"column":30,"nodeType":"199","messageId":"200","endLine":54,"endColumn":32},{"ruleId":"197","severity":1,"message":"198","line":70,"column":27,"nodeType":"199","messageId":"200","endLine":70,"endColumn":29},{"ruleId":"197","severity":1,"message":"198","line":83,"column":43,"nodeType":"199","messageId":"200","endLine":83,"endColumn":45},{"ruleId":"204","severity":1,"message":"224","line":25,"column":6,"nodeType":"206","endLine":25,"endColumn":8,"suggestions":"225"},{"ruleId":"192","severity":1,"message":"193","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":26},{"ruleId":"192","severity":1,"message":"226","line":4,"column":21,"nodeType":"194","messageId":"195","endLine":4,"endColumn":30},{"ruleId":"192","severity":1,"message":"227","line":6,"column":8,"nodeType":"194","messageId":"195","endLine":6,"endColumn":14},{"ruleId":"197","severity":1,"message":"198","line":75,"column":49,"nodeType":"199","messageId":"200","endLine":75,"endColumn":51},{"ruleId":"192","severity":1,"message":"228","line":89,"column":9,"nodeType":"194","messageId":"195","endLine":89,"endColumn":21},{"ruleId":"204","severity":1,"message":"229","line":33,"column":8,"nodeType":"206","endLine":33,"endColumn":10,"suggestions":"230"},{"ruleId":"204","severity":1,"message":"231","line":30,"column":6,"nodeType":"206","endLine":30,"endColumn":14,"suggestions":"232"},{"ruleId":"197","severity":1,"message":"203","line":47,"column":61,"nodeType":"199","messageId":"200","endLine":47,"endColumn":63},{"ruleId":"197","severity":1,"message":"203","line":60,"column":61,"nodeType":"199","messageId":"200","endLine":60,"endColumn":63},{"ruleId":"197","severity":1,"message":"203","line":73,"column":61,"nodeType":"199","messageId":"200","endLine":73,"endColumn":63},{"ruleId":"204","severity":1,"message":"233","line":82,"column":6,"nodeType":"206","endLine":82,"endColumn":8,"suggestions":"234"},{"ruleId":"197","severity":1,"message":"203","line":85,"column":41,"nodeType":"199","messageId":"200","endLine":85,"endColumn":43},{"ruleId":"204","severity":1,"message":"235","line":104,"column":6,"nodeType":"206","endLine":104,"endColumn":17,"suggestions":"236"},{"ruleId":"197","severity":1,"message":"198","line":150,"column":44,"nodeType":"199","messageId":"200","endLine":150,"endColumn":46},{"ruleId":"192","severity":1,"message":"193","line":2,"column":27,"nodeType":"194","messageId":"195","endLine":2,"endColumn":36},{"ruleId":"192","severity":1,"message":"237","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":19},{"ruleId":"204","severity":1,"message":"238","line":55,"column":8,"nodeType":"206","endLine":55,"endColumn":10,"suggestions":"239"},{"ruleId":"192","severity":1,"message":"240","line":3,"column":16,"nodeType":"194","messageId":"195","endLine":3,"endColumn":22},{"ruleId":"192","severity":1,"message":"241","line":6,"column":9,"nodeType":"194","messageId":"195","endLine":6,"endColumn":13},{"ruleId":"192","severity":1,"message":"202","line":8,"column":18,"nodeType":"194","messageId":"195","endLine":8,"endColumn":27},{"ruleId":"197","severity":1,"message":"203","line":116,"column":66,"nodeType":"199","messageId":"200","endLine":116,"endColumn":68},{"ruleId":"197","severity":1,"message":"203","line":129,"column":72,"nodeType":"199","messageId":"200","endLine":129,"endColumn":74},{"ruleId":"192","severity":1,"message":"242","line":143,"column":11,"nodeType":"194","messageId":"195","endLine":143,"endColumn":19},{"ruleId":"192","severity":1,"message":"243","line":5,"column":3,"nodeType":"194","messageId":"195","endLine":5,"endColumn":16},{"ruleId":"192","severity":1,"message":"244","line":6,"column":3,"nodeType":"194","messageId":"195","endLine":6,"endColumn":9},{"ruleId":"192","severity":1,"message":"245","line":7,"column":3,"nodeType":"194","messageId":"195","endLine":7,"endColumn":8},{"ruleId":"192","severity":1,"message":"246","line":8,"column":3,"nodeType":"194","messageId":"195","endLine":8,"endColumn":13},{"ruleId":"192","severity":1,"message":"247","line":11,"column":10,"nodeType":"194","messageId":"195","endLine":11,"endColumn":14},{"ruleId":"192","severity":1,"message":"248","line":11,"column":16,"nodeType":"194","messageId":"195","endLine":11,"endColumn":27},{"ruleId":"192","severity":1,"message":"249","line":11,"column":29,"nodeType":"194","messageId":"195","endLine":11,"endColumn":37},{"ruleId":"192","severity":1,"message":"210","line":11,"column":39,"nodeType":"194","messageId":"195","endLine":11,"endColumn":42},{"ruleId":"192","severity":1,"message":"209","line":11,"column":44,"nodeType":"194","messageId":"195","endLine":11,"endColumn":47},{"ruleId":"192","severity":1,"message":"250","line":11,"column":49,"nodeType":"194","messageId":"195","endLine":11,"endColumn":59},{"ruleId":"192","severity":1,"message":"251","line":12,"column":10,"nodeType":"194","messageId":"195","endLine":12,"endColumn":24},{"ruleId":"204","severity":1,"message":"252","line":43,"column":6,"nodeType":"206","endLine":43,"endColumn":14,"suggestions":"253"},{"ruleId":"197","severity":1,"message":"198","line":61,"column":11,"nodeType":"199","messageId":"200","endLine":61,"endColumn":13},{"ruleId":"254","severity":1,"message":"255","line":7,"column":9,"nodeType":"256","messageId":"257","endLine":22,"endColumn":10},{"ruleId":"204","severity":1,"message":"224","line":21,"column":6,"nodeType":"206","endLine":21,"endColumn":8,"suggestions":"258"},{"ruleId":"197","severity":1,"message":"198","line":9,"column":17,"nodeType":"199","messageId":"200","endLine":9,"endColumn":19},{"ruleId":"192","severity":1,"message":"249","line":2,"column":29,"nodeType":"194","messageId":"195","endLine":2,"endColumn":37},{"ruleId":"192","severity":1,"message":"250","line":2,"column":49,"nodeType":"194","messageId":"195","endLine":2,"endColumn":59},{"ruleId":"192","severity":1,"message":"259","line":11,"column":12,"nodeType":"194","messageId":"195","endLine":11,"endColumn":25},{"ruleId":"192","severity":1,"message":"260","line":11,"column":27,"nodeType":"194","messageId":"195","endLine":11,"endColumn":37},{"ruleId":"192","severity":1,"message":"261","line":12,"column":12,"nodeType":"194","messageId":"195","endLine":12,"endColumn":23},{"ruleId":"192","severity":1,"message":"262","line":12,"column":25,"nodeType":"194","messageId":"195","endLine":12,"endColumn":33},{"ruleId":"192","severity":1,"message":"263","line":13,"column":12,"nodeType":"194","messageId":"195","endLine":13,"endColumn":27},{"ruleId":"192","severity":1,"message":"264","line":13,"column":29,"nodeType":"194","messageId":"195","endLine":13,"endColumn":41},{"ruleId":"192","severity":1,"message":"265","line":14,"column":12,"nodeType":"194","messageId":"195","endLine":14,"endColumn":32},{"ruleId":"192","severity":1,"message":"266","line":14,"column":34,"nodeType":"194","messageId":"195","endLine":14,"endColumn":51},{"ruleId":"204","severity":1,"message":"267","line":39,"column":8,"nodeType":"206","endLine":39,"endColumn":84,"suggestions":"268"},{"ruleId":"197","severity":1,"message":"203","line":44,"column":72,"nodeType":"199","messageId":"200","endLine":44,"endColumn":74},{"ruleId":"192","severity":1,"message":"269","line":72,"column":15,"nodeType":"194","messageId":"195","endLine":72,"endColumn":29},"no-native-reassign",["270"],"no-negated-in-lhs",["271"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.roles', 'props.username', and 'user_list'. Either include them or remove the dependency array. You can also do a functional update 'set_user_list(u => ...)' if you only need 'user_list' in the 'set_user_list' call.","ArrayExpression",["272"],"'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'NonceProvider' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["273"],"React Hook useEffect has missing dependencies: 'data', 'props.roles', and 'props.username'. Either include them or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["274"],"'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["275"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'props.username'. Either include it or remove the dependency array.",["276"],"'DateUtils' is defined but never used.","'Select' is defined but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'config', 'history', and 'token'. Either include them or remove the dependency array.",["277"],"React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array. You can also do a functional update 'set_messages(m => ...)' if you only need 'messages' in the 'set_messages' call.",["278"],"React Hook useEffect has missing dependencies: 'props.roles', 'user_list', and 'username'. Either include them or remove the dependency array. You can also do a functional update 'set_user_list(u => ...)' if you only need 'user_list' in the 'set_user_list' call.",["279"],"React Hook useEffect has missing dependencies: 'config', 'offset', and 'username'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'set_messages' needs the current value of 'offset'.",["280"],"'propTypes' is defined but never used.","React Hook useEffect has missing dependencies: 'perPage' and 'username'. Either include them or remove the dependency array.",["281"],"'Button' is defined but never used.","'mode' is assigned a value but never used.","'subjects' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useHistory' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Dropdown' is defined but never used.","'Pagination' is defined but never used.","'axios_instance' is defined but never used.","React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array. You can also do a functional update 'setUsers(u => ...)' if you only need 'users' in the 'setUsers' call.",["282"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["283"],"'studentFilter' is assigned a value but never used.","'setStudent' is assigned a value but never used.","'tutorFilter' is assigned a value but never used.","'setTutor' is assigned a value but never used.","'startDateFilter' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'sessionSubjectFilter' is assigned a value but never used.","'setSessionSubject' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["284"],"'subjectsFilter' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"293","fix":"307"},{"desc":"308","fix":"309"},"Update the dependencies array to be: [props.roles, props.username, user_list]",{"range":"310","text":"311"},"Update the dependencies array to be: [data, filters]",{"range":"312","text":"313"},"Update the dependencies array to be: [data, props.roles, props.username]",{"range":"314","text":"315"},"Update the dependencies array to be: [username]",{"range":"316","text":"317"},"Update the dependencies array to be: [props.username]",{"range":"318","text":"319"},"Update the dependencies array to be: [config, history, token]",{"range":"320","text":"321"},"Update the dependencies array to be: [messages, offset]",{"range":"322","text":"323"},"Update the dependencies array to be: [props.roles, user_list, username]",{"range":"324","text":"325"},"Update the dependencies array to be: [config, offset, recipient, username]",{"range":"326","text":"327"},"Update the dependencies array to be: [perPage, username]",{"range":"328","text":"329"},"Update the dependencies array to be: [offset, users]",{"range":"330","text":"331"},{"range":"332","text":"319"},"Update the dependencies array to be: [nameFilter, emailFilter, usernameFilter, phoneFilter, role, subjectsFilter, props]",{"range":"333","text":"334"},[1685,1687],"[props.roles, props.username, user_list]",[1867,1876],"[data, filters]",[3503,3505],"[data, props.roles, props.username]",[1355,1357],"[username]",[750,752],"[props.username]",[961,963],"[config, history, token]",[1143,1151],"[messages, offset]",[2643,2645],"[props.roles, user_list, username]",[3355,3366],"[config, offset, recipient, username]",[1812,1814],"[perPage, username]",[1455,1463],"[offset, users]",[650,652],[2217,2293],"[nameFilter, emailFilter, usernameFilter, phoneFilter, role, subjectsFilter, props]"]